<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/templates/game/room.html.twig">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/templates/game/room.html.twig" />
              <option name="originalContent" value="{% extends 'base.html.twig' %}&#10;&#10;{% block title %}Pedantix - Salle {{ room_code }}{% endblock %}&#10;&#10;{% block stylesheets %}&#10;&lt;style&gt;&#10;    .article-content {&#10;        background: rgba(255, 255, 255, 0.95);&#10;        padding: 30px;&#10;        border-radius: 15px;&#10;        line-height: 1.8;&#10;        font-size: 16px;&#10;        text-align: justify;&#10;        max-height: 600px;&#10;        overflow-y: auto;&#10;        border: 2px solid #e0e0e0;&#10;    }&#10;&#10;    .hidden-word {&#10;        background: #d0d0d0;&#10;        color: #d0d0d0;&#10;        border-radius: 3px;&#10;        padding: 1px 2px;&#10;        cursor: pointer;&#10;        user-select: none;&#10;        transition: all 0.3s ease;&#10;    }&#10;&#10;    .hidden-word:hover {&#10;        background: #c0c0c0;&#10;        transform: scale(1.05);&#10;    }&#10;&#10;    .hidden-word-with-proximity {&#10;        /* Le fond grisé et la couleur du texte sont maintenant définis par le style inline depuis PHP */&#10;        border-radius: 3px;&#10;        padding: 1px 2px;&#10;        cursor: pointer;&#10;        user-select: none;&#10;        transition: all 0.3s ease;&#10;    }&#10;&#10;    .revealed-word {&#10;        color: #333;&#10;        background: transparent;&#10;        border-radius: 3px;&#10;        padding: 1px 2px;&#10;        font-weight: 500;&#10;        animation: revealWord 0.5s ease;&#10;    }&#10;&#10;    .revealed-word-victory {&#10;        color: #333;&#10;        background: transparent;&#10;        font-weight: normal;&#10;        /* Affichage normal après victoire - pas de surbrillance jaune */&#10;    }&#10;&#10;    @keyframes revealWord {&#10;        from {&#10;            background: #d0d0d0;&#10;            color: #d0d0d0;&#10;            transform: scale(1);&#10;        }&#10;        to {&#10;            background: transparent;&#10;            color: #333;&#10;            transform: scale(1.05);&#10;        }&#10;    }&#10;&#10;    .proximity-indicator {&#10;        background: linear-gradient(45deg, #FF5722, #D32F2F);&#10;        color: white;&#10;        padding: 8px 15px;&#10;        border-radius: 20px;&#10;        display: inline-block;&#10;        margin: 5px;&#10;        font-weight: 500;&#10;        box-shadow: 0 2px 10px rgba(255, 87, 34, 0.3);&#10;        animation: fadeInScale 0.5s ease;&#10;    }&#10;&#10;    .proximity-hot { background: #d0d0d0 !important; color: #FFD700 !important; font-weight: bold !important; }&#10;    .proximity-warm { background: #d0d0d0 !important; color: #FF8C00 !important; font-weight: bold !important; }&#10;    .proximity-cold { background: #d0d0d0 !important; color: #696969 !important; }&#10;&#10;    .confetti {&#10;        position: fixed;&#10;        top: -10px;&#10;        left: 50%;&#10;        transform: translateX(-50%);&#10;        width: 10px;&#10;        height: 10px;&#10;        background: #f0f;&#10;        animation: confetti-fall linear infinite;&#10;        z-index: 1000;&#10;    }&#10;&#10;    @keyframes confetti-fall {&#10;        to {&#10;            transform: translateX(-50%) translateY(100vh) rotate(720deg);&#10;        }&#10;    }&#10;&#10;    .guess-history {&#10;        max-height: 400px;&#10;        overflow-y: auto;&#10;        padding: 0;&#10;    }&#10;&#10;    .guess-item {&#10;        display: flex;&#10;        align-items: center;&#10;        padding: 8px 12px;&#10;        margin-bottom: 8px;&#10;        background: rgba(255, 255, 255, 0.8);&#10;        border-radius: 10px;&#10;        backdrop-filter: blur(5px);&#10;        border: 1px solid rgba(102, 126, 234, 0.2);&#10;        transition: all 0.3s ease;&#10;    }&#10;&#10;    .guess-item:hover {&#10;        background: rgba(255, 255, 255, 0.9);&#10;        transform: translateX(5px);&#10;        box-shadow: 0 3px 15px rgba(102, 126, 234, 0.3);&#10;    }&#10;&#10;    .guess-item.found {&#10;        border-left: 4px solid #28a745;&#10;        background: rgba(40, 167, 69, 0.1);&#10;    }&#10;&#10;    .guess-number {&#10;        background: linear-gradient(45deg, #667eea, #764ba2);&#10;        color: white;&#10;        border-radius: 50%;&#10;        width: 24px;&#10;        height: 24px;&#10;        display: flex;&#10;        align-items: center;&#10;        justify-content: center;&#10;        font-size: 12px;&#10;        font-weight: bold;&#10;        margin-right: 12px;&#10;        flex-shrink: 0;&#10;        box-shadow: 0 2px 5px rgba(102, 126, 234, 0.3);&#10;    }&#10;&#10;    .guess-item.found .guess-number {&#10;        background: linear-gradient(45deg, #28a745, #20c997);&#10;    }&#10;&#10;    .guess-word {&#10;        font-weight: 500;&#10;        color: #333;&#10;        flex-grow: 1;&#10;    }&#10;&#10;    .guess-item.found .guess-word {&#10;        color: #28a745;&#10;        font-weight: 600;&#10;    }&#10;&#10;    .title-word {&#10;        background: linear-gradient(45deg, #FFD700, #FFA500) !important;&#10;        color: #333 !important;&#10;        font-weight: bold !important;&#10;        font-size: 1.1em !important;&#10;        padding: 2px 4px !important;&#10;        box-shadow: 0 0 10px rgba(255, 215, 0, 0.5) !important;&#10;    }&#10;&#10;    .word-length-hint {&#10;        position: absolute;&#10;        background: rgba(0, 0, 0, 0.8);&#10;        color: white;&#10;        padding: 8px 12px;&#10;        border-radius: 6px;&#10;        font-size: 14px;&#10;        font-weight: bold;&#10;        pointer-events: none;&#10;        z-index: 10000;&#10;        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.3);&#10;        opacity: 0;&#10;        transform: translateY(-10px);&#10;        transition: all 0.3s ease;&#10;    }&#10;&#10;    .word-length-hint.show {&#10;        opacity: 1;&#10;        transform: translateY(0);&#10;    }&#10;&#10;    .word-length-hint::after {&#10;        content: '';&#10;        position: absolute;&#10;        top: 100%;&#10;        left: 50%;&#10;        margin-left: -5px;&#10;        width: 0;&#10;        height: 0;&#10;        border: 5px solid transparent;&#10;        border-top-color: rgba(0, 0, 0, 0.8);&#10;    }&#10;&#10;    .collapse-toggle {&#10;        cursor: pointer;&#10;        user-select: none;&#10;        transition: all 0.3s ease;&#10;    }&#10;&#10;    .collapse-toggle:hover {&#10;        color: #667eea;&#10;    }&#10;&#10;    .collapse-toggle .fas {&#10;        transition: transform 0.3s ease;&#10;    }&#10;&#10;    .collapse-toggle[aria-expanded=&quot;false&quot;] .fas {&#10;        transform: rotate(-90deg);&#10;    }&#10;&#10;    @media (max-width: 1200px) {&#10;        .main-game-content {&#10;            margin-left: 0;&#10;        }&#10;    }&#10;&lt;/style&gt;&#10;{% endblock %}&#10;&#10;{% block body %}&#10;&lt;div class=&quot;row&quot;&gt;&#10;    &lt;!-- Zone de jeu principale --&gt;&#10;    &lt;div class=&quot;col-lg-8&quot;&gt;&#10;        &lt;div class=&quot;game-container p-4&quot;&gt;&#10;            &lt;!-- En-tête de la salle --&gt;&#10;            &lt;div class=&quot;d-flex justify-content-between align-items-center mb-4&quot;&gt;&#10;                &lt;div&gt;&#10;                    &lt;h2 id=&quot;roomTitle&quot;&gt;Chargement...&lt;/h2&gt;&#10;                    &lt;p class=&quot;text-muted mb-0&quot;&gt;Code de salle: &lt;strong&gt;{{ room_code }}&lt;/strong&gt;&lt;/p&gt;&#10;                &lt;/div&gt;&#10;                &lt;button class=&quot;btn btn-outline-primary&quot; onclick=&quot;copyRoomCode()&quot;&gt;&#10;                    &lt;i class=&quot;fas fa-copy me-2&quot;&gt;&lt;/i&gt;Partager&#10;                &lt;/button&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;!-- Statistiques du joueur --&gt;&#10;            &lt;div class=&quot;row mb-4&quot; id=&quot;playerStats&quot; style=&quot;display: none;&quot;&gt;&#10;                &lt;div class=&quot;col-md-3 col-6&quot;&gt;&#10;                    &lt;div class=&quot;text-center p-3 bg-light rounded&quot;&gt;&#10;                        &lt;h4 id=&quot;playerScore&quot; class=&quot;text-primary mb-0&quot;&gt;0&lt;/h4&gt;&#10;                        &lt;small class=&quot;text-muted&quot;&gt;Score&lt;/small&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;col-md-3 col-6&quot;&gt;&#10;                    &lt;div class=&quot;text-center p-3 bg-light rounded&quot;&gt;&#10;                        &lt;h4 id=&quot;playerAttempts&quot; class=&quot;text-info mb-0&quot;&gt;0&lt;/h4&gt;&#10;                        &lt;small class=&quot;text-muted&quot;&gt;Tentatives&lt;/small&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;col-md-3 col-6&quot;&gt;&#10;                    &lt;div class=&quot;text-center p-3 bg-light rounded&quot;&gt;&#10;                        &lt;h4 id=&quot;foundWordsCount&quot; class=&quot;text-success mb-0&quot;&gt;0&lt;/h4&gt;&#10;                        &lt;small class=&quot;text-muted&quot;&gt;Mots trouvés&lt;/small&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;col-md-3 col-6&quot;&gt;&#10;                    &lt;div class=&quot;text-center p-3 bg-light rounded&quot;&gt;&#10;                        &lt;h4 id=&quot;playerName&quot; class=&quot;text-warning mb-0&quot;&gt;-&lt;/h4&gt;&#10;                        &lt;small class=&quot;text-muted&quot;&gt;Joueur&lt;/small&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;!-- Formulaire de saisie --&gt;&#10;            &lt;form id=&quot;guessForm&quot; style=&quot;display: none;&quot;&gt;&#10;                &lt;div class=&quot;input-group input-group-lg mb-4&quot;&gt;&#10;                    &lt;input type=&quot;text&quot; class=&quot;form-control word-input&quot; id=&quot;wordGuess&quot;&#10;                           placeholder=&quot;Entrez votre mot...&quot; autocomplete=&quot;off&quot;&gt;&#10;                    &lt;button class=&quot;btn btn-primary&quot; type=&quot;submit&quot;&gt;&#10;                        &lt;i class=&quot;fas fa-search me-2&quot;&gt;&lt;/i&gt;Deviner&#10;                    &lt;/button&gt;&#10;                &lt;/div&gt;&#10;            &lt;/form&gt;&#10;&#10;            &lt;!-- Zone de connexion --&gt;&#10;            &lt;div id=&quot;connectionForm&quot;&gt;&#10;                &lt;div class=&quot;text-center mb-4&quot;&gt;&#10;                    &lt;h4&gt;Rejoindre la salle {{ room_code }}&lt;/h4&gt;&#10;                &lt;/div&gt;&#10;                &lt;form id=&quot;joinRoomForm&quot;&gt;&#10;                    &lt;div class=&quot;input-group input-group-lg mb-3&quot;&gt;&#10;                        &lt;input type=&quot;text&quot; class=&quot;form-control word-input&quot; id=&quot;playerNameInput&quot;&#10;                               placeholder=&quot;Votre nom...&quot; maxlength=&quot;20&quot; required&gt;&#10;                        &lt;button class=&quot;btn btn-primary&quot; type=&quot;submit&quot;&gt;&#10;                            &lt;i class=&quot;fas fa-sign-in-alt me-2&quot;&gt;&lt;/i&gt;Rejoindre&#10;                        &lt;/button&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/form&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;!-- Messages de résultat --&gt;&#10;            &lt;div id=&quot;resultMessage&quot; class=&quot;mb-4&quot;&gt;&lt;/div&gt;&#10;&#10;            &lt;!-- Article Wikipedia avec mots grisés --&gt;&#10;            &lt;div id=&quot;articleSection&quot; style=&quot;display: none;&quot;&gt;&#10;                &lt;!-- Progression du titre à deviner --&gt;&#10;                &lt;div id=&quot;titleProgressSection&quot; class=&quot;mb-4&quot; style=&quot;display: none;&quot;&gt;&#10;                    &lt;h5 class=&quot;text-center mb-3&quot;&gt;&#10;                        &lt;i class=&quot;fas fa-bullseye text-warning me-2&quot;&gt;&lt;/i&gt;Mot/Titre à deviner :&#10;                    &lt;/h5&gt;&#10;                    &lt;div class=&quot;text-center p-3 bg-light rounded&quot;&gt;&#10;                        &lt;h3 id=&quot;titleProgress&quot; class=&quot;mb-0 text-primary font-monospace&quot;&gt;&lt;/h3&gt;&#10;                        &lt;small id=&quot;titleProgressInfo&quot; class=&quot;text-muted&quot;&gt;&lt;/small&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;                &lt;h5 class=&quot;mb-3&quot;&gt;Article Wikipedia :&lt;/h5&gt;&#10;                &lt;div id=&quot;articleContent&quot; class=&quot;article-content&quot;&gt;&#10;                    Chargement de l'article...&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;    &lt;/div&gt;&#10;&#10;    &lt;!-- Sidebar avec historique, classement et joueurs actifs --&gt;&#10;    &lt;div class=&quot;col-lg-4&quot;&gt;&#10;        &lt;!-- Historique des tentatives --&gt;&#10;        &lt;div class=&quot;game-container p-4 mb-4&quot; id=&quot;historyPanel&quot; style=&quot;display: none;&quot;&gt;&#10;            &lt;div class=&quot;d-flex justify-content-between align-items-center mb-3&quot;&gt;&#10;                &lt;h5 class=&quot;mb-0&quot;&gt;&#10;                    &lt;i class=&quot;fas fa-history text-info me-2&quot;&gt;&lt;/i&gt;Historique&#10;                    &lt;span id=&quot;totalAttempts&quot; class=&quot;badge bg-primary ms-2&quot;&gt;0&lt;/span&gt;&#10;                &lt;/h5&gt;&#10;                &lt;span class=&quot;collapse-toggle&quot; data-bs-toggle=&quot;collapse&quot; data-bs-target=&quot;#historyCollapse&quot; aria-expanded=&quot;true&quot;&gt;&#10;                    &lt;i class=&quot;fas fa-chevron-down&quot;&gt;&lt;/i&gt;&#10;                &lt;/span&gt;&#10;            &lt;/div&gt;&#10;            &lt;div class=&quot;collapse show&quot; id=&quot;historyCollapse&quot;&gt;&#10;                &lt;div id=&quot;guessHistory&quot; class=&quot;guess-history&quot;&gt;&#10;                    &lt;p class=&quot;text-muted text-center&quot;&gt;Aucune tentative pour le moment&lt;/p&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;!-- Classement --&gt;&#10;        &lt;div class=&quot;game-container p-4 mb-4&quot;&gt;&#10;            &lt;div class=&quot;d-flex justify-content-between align-items-center mb-3&quot;&gt;&#10;                &lt;h5 class=&quot;mb-0&quot;&gt;&#10;                    &lt;i class=&quot;fas fa-trophy text-warning me-2&quot;&gt;&lt;/i&gt;Classement&#10;                &lt;/h5&gt;&#10;                &lt;span class=&quot;collapse-toggle&quot; data-bs-toggle=&quot;collapse&quot; data-bs-target=&quot;#leaderboardCollapse&quot; aria-expanded=&quot;true&quot;&gt;&#10;                    &lt;i class=&quot;fas fa-chevron-down&quot;&gt;&lt;/i&gt;&#10;                &lt;/span&gt;&#10;            &lt;/div&gt;&#10;            &lt;div class=&quot;collapse show&quot; id=&quot;leaderboardCollapse&quot;&gt;&#10;                &lt;div id=&quot;leaderboard&quot;&gt;&#10;                    &lt;p class=&quot;text-muted text-center&quot;&gt;Chargement...&lt;/p&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;!-- Joueurs actifs --&gt;&#10;        &lt;div class=&quot;game-container p-4&quot;&gt;&#10;            &lt;div class=&quot;d-flex justify-content-between align-items-center mb-3&quot;&gt;&#10;                &lt;h5 class=&quot;mb-0&quot;&gt;&#10;                    &lt;i class=&quot;fas fa-users text-success me-2&quot;&gt;&lt;/i&gt;Joueurs actifs&#10;                &lt;/h5&gt;&#10;                &lt;span class=&quot;collapse-toggle&quot; data-bs-toggle=&quot;collapse&quot; data-bs-target=&quot;#playersCollapse&quot; aria-expanded=&quot;true&quot;&gt;&#10;                    &lt;i class=&quot;fas fa-chevron-down&quot;&gt;&lt;/i&gt;&#10;                &lt;/span&gt;&#10;            &lt;/div&gt;&#10;            &lt;div class=&quot;collapse show&quot; id=&quot;playersCollapse&quot;&gt;&#10;                &lt;div id=&quot;activePlayers&quot;&gt;&#10;                    &lt;p class=&quot;text-muted text-center&quot;&gt;Chargement...&lt;/p&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;    &lt;/div&gt;&#10;&lt;/div&gt;&#10;&#10;&lt;!-- Modal de fin de jeu --&gt;&#10;&lt;div class=&quot;modal fade&quot; id=&quot;gameCompletedModal&quot; tabindex=&quot;-1&quot;&gt;&#10;    &lt;div class=&quot;modal-dialog modal-lg&quot;&gt;&#10;        &lt;div class=&quot;modal-content&quot;&gt;&#10;            &lt;div class=&quot;modal-header bg-success text-white&quot;&gt;&#10;                &lt;h5 class=&quot;modal-title&quot;&gt;&#10;                    &lt;i class=&quot;fas fa-trophy me-2&quot;&gt;&lt;/i&gt;Félicitations !&#10;                &lt;/h5&gt;&#10;            &lt;/div&gt;&#10;            &lt;div class=&quot;modal-body text-center&quot;&gt;&#10;                &lt;h3&gt;���� Vous avez trouvé le mot-titre ! &lt;/h3&gt;&#10;                &lt;p class=&quot;lead&quot;&gt;Score final: &lt;span id=&quot;finalScore&quot; class=&quot;fw-bold text-success&quot;&gt;&lt;/span&gt;&lt;/p&gt;&#10;                &lt;p&gt;Tentatives: &lt;span id=&quot;finalAttempts&quot; class=&quot;fw-bold&quot;&gt;&lt;/span&gt;&lt;/p&gt;&#10;                &lt;div id=&quot;confettiContainer&quot;&gt;&lt;/div&gt;&#10;            &lt;/div&gt;&#10;            &lt;div class=&quot;modal-footer&quot;&gt;&#10;                &lt;button type=&quot;button&quot; class=&quot;btn btn-primary&quot; onclick=&quot;location.reload()&quot;&gt;&#10;                    Rejouer&#10;                &lt;/button&gt;&#10;                &lt;button type=&quot;button&quot; class=&quot;btn btn-secondary&quot; onclick=&quot;location.href='/'&quot;&gt;&#10;                    Accueil&#10;                &lt;/button&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;    &lt;/div&gt;&#10;&lt;/div&gt;&#10;{% endblock %}&#10;&#10;{% block javascripts %}&#10;&lt;script&gt;&#10;let gameSession = null;&#10;let roomCode = '{{ room_code }}';&#10;let guessHistory = [];&#10;let uniqueWords = new Set();&#10;let attemptCounter = 0;&#10;let lastEventId = 0; // Pour suivre les événements temps réel&#10;let gameEventsInterval = null; // Interval pour les événements&#10;&#10;document.addEventListener('DOMContentLoaded', function() {&#10;    // Vérifier si on a déjà une session stockée&#10;    const storedSession = sessionStorage.getItem('gameSession');&#10;    if (storedSession) {&#10;        const sessionData = JSON.parse(storedSession);&#10;        if (sessionData.roomCode === roomCode) {&#10;            gameSession = sessionData;&#10;            showGameInterface();&#10;            loadGameData();&#10;        }&#10;    }&#10;&#10;    // Gérer la connexion à la salle&#10;    document.getElementById('joinRoomForm').addEventListener('submit', async function(e) {&#10;        e.preventDefault();&#10;        const playerName = document.getElementById('playerNameInput').value;&#10;        await joinRoom(playerName);&#10;    });&#10;&#10;    // Gérer les devinettes&#10;    document.getElementById('guessForm').addEventListener('submit', async function(e) {&#10;        e.preventDefault();&#10;        const guess = document.getElementById('wordGuess').value.trim().toLowerCase();&#10;        if (guess) {&#10;            // Vérifier si le mot a déjà été essayé&#10;            if (uniqueWords.has(guess)) {&#10;                showResult(`Le mot &quot;${guess}&quot; a déjà été essayé !`, 'warning');&#10;                document.getElementById('wordGuess').value = '';&#10;                return;&#10;            }&#10;&#10;            await submitGuess(guess);&#10;            document.getElementById('wordGuess').value = '';&#10;        }&#10;    });&#10;&#10;    // Actualiser le classement périodiquement&#10;    setInterval(updateLeaderboard, 10000); // Toutes les 10 secondes&#10;&#10;    // Actualiser l'article périodiquement pour voir les mots trouvés par d'autres joueurs&#10;    setInterval(loadArticleContent, 5000); // Toutes les 5 secondes&#10;&#10;    // Démarrer la surveillance des événements temps réel&#10;    startGameEventsPolling();&#10;});&#10;&#10;// Fonction pour surveiller les événements de jeu en temps réel&#10;function startGameEventsPolling() {&#10;    if (gameEventsInterval) {&#10;        clearInterval(gameEventsInterval);&#10;    }&#10;&#10;    gameEventsInterval = setInterval(async () =&gt; {&#10;        if (gameSession) {&#10;            await checkGameEvents();&#10;        }&#10;    }, 3000); // Vérifier toutes les 3 secondes&#10;}&#10;&#10;// Vérifier les nouveaux événements de jeu&#10;async function checkGameEvents() {&#10;    if (!gameSession) return;&#10;&#10;    try {&#10;        const response = await fetch(`/api/game-events/${roomCode}?session_id=${gameSession.sessionId}&amp;last_event_id=${lastEventId}`);&#10;        const data = await response.json();&#10;&#10;        if (data.events &amp;&amp; data.events.length &gt; 0) {&#10;            // Traiter chaque nouvel événement&#10;            data.events.forEach(event =&gt; {&#10;                handleGameEvent(event);&#10;            });&#10;&#10;            lastEventId = data.last_event_id;&#10;        }&#10;&#10;        // Vérifier l'état global du jeu&#10;        if (data.game_status) {&#10;            handleGameStatus(data.game_status);&#10;        }&#10;    } catch (error) {&#10;        console.error('Erreur lors de la vérification des événements:', error);&#10;    }&#10;}&#10;&#10;// Gérer un événement de jeu&#10;function handleGameEvent(event) {&#10;    switch (event.type) {&#10;        case 'player_won':&#10;            // Afficher une notification quand un autre joueur trouve le mot&#10;            if (event.player_name !== gameSession.playerName) {&#10;                showPlayerWonNotification(event);&#10;            }&#10;            break;&#10;        case 'game_completed':&#10;            // Le jeu est terminé globalement&#10;            handleGameCompleted(event);&#10;            break;&#10;    }&#10;}&#10;&#10;// Afficher une notification quand un joueur trouve le mot&#10;function showPlayerWonNotification(event) {&#10;    const notification = document.createElement('div');&#10;    notification.className = 'alert alert-success alert-dismissible fade show position-fixed';&#10;    notification.style.cssText = 'top: 20px; right: 20px; z-index: 9999; min-width: 300px;';&#10;    notification.innerHTML = `&#10;        &lt;strong&gt;&lt;i class=&quot;fas fa-trophy text-warning me-2&quot;&gt;&lt;/i&gt;${event.message}&lt;/strong&gt;&#10;        &lt;br&gt;&lt;small&gt;Score: ${event.score} - ${event.attempts} tentatives&lt;/small&gt;&#10;        &lt;button type=&quot;button&quot; class=&quot;btn-close&quot; data-bs-dismiss=&quot;alert&quot;&gt;&lt;/button&gt;&#10;    `;&#10;&#10;    document.body.appendChild(notification);&#10;&#10;    // Animation d'entrée&#10;    setTimeout(() =&gt; {&#10;        notification.classList.add('show');&#10;    }, 100);&#10;&#10;    // Supprimer automatiquement après 5 secondes&#10;    setTimeout(() =&gt; {&#10;        notification.remove();&#10;    }, 5000);&#10;&#10;    // Mettre à jour le classement&#10;    updateLeaderboard();&#10;}&#10;&#10;// Gérer l'état global du jeu&#10;function handleGameStatus(gameStatus) {&#10;    if (gameStatus.is_completed &amp;&amp; gameStatus.game_mode === 'competition') {&#10;        // Arrêter la surveillance des événements&#10;        if (gameEventsInterval) {&#10;            clearInterval(gameEventsInterval);&#10;            gameEventsInterval = null;&#10;        }&#10;&#10;        // Afficher le modal de fin de partie globale&#10;        showGameGloballyCompletedModal(gameStatus);&#10;    }&#10;}&#10;&#10;// Modal de fin de partie globale (tous les joueurs ont terminé)&#10;function showGameGloballyCompletedModal(gameStatus) {&#10;    // Créer le modal de fin de partie globale&#10;    const modalHTML = `&#10;        &lt;div class=&quot;modal fade&quot; id=&quot;gameGloballyCompletedModal&quot; tabindex=&quot;-1&quot; data-bs-backdrop=&quot;static&quot;&gt;&#10;            &lt;div class=&quot;modal-dialog modal-lg&quot;&gt;&#10;                &lt;div class=&quot;modal-content&quot;&gt;&#10;                    &lt;div class=&quot;modal-header bg-primary text-white&quot;&gt;&#10;                        &lt;h5 class=&quot;modal-title&quot;&gt;&#10;                            &lt;i class=&quot;fas fa-flag-checkered me-2&quot;&gt;&lt;/i&gt;Partie terminée !&#10;                        &lt;/h5&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div class=&quot;modal-body text-center&quot;&gt;&#10;                        &lt;h3&gt; Tous les joueurs ont trouvé le mot-titre ! &lt;/h3&gt;&#10;                        ${gameStatus.winner ? `&#10;                            &lt;div class=&quot;alert alert-warning&quot;&gt;&#10;                                &lt;h4&gt;&lt;i class=&quot;fas fa-crown text-warning me-2&quot;&gt;&lt;/i&gt;Gagnant: ${gameStatus.winner.player_name}&lt;/h4&gt;&#10;                                &lt;p&gt;Score: ${gameStatus.winner.score} - ${gameStatus.winner.attempts} tentatives&lt;/p&gt;&#10;                            &lt;/div&gt;&#10;                        ` : ''}&#10;                        &lt;p class=&quot;lead&quot;&gt;Que souhaitez-vous faire maintenant ?&lt;/p&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div class=&quot;modal-footer justify-content-center&quot;&gt;&#10;                        &lt;button type=&quot;button&quot; class=&quot;btn btn-success btn-lg me-3&quot; onclick=&quot;startNewGame()&quot;&gt;&#10;                            &lt;i class=&quot;fas fa-play me-2&quot;&gt;&lt;/i&gt;Nouvelle partie&#10;                        &lt;/button&gt;&#10;                        &lt;button type=&quot;button&quot; class=&quot;btn btn-secondary btn-lg&quot; onclick=&quot;window.location.href='/'&quot;&gt;&#10;                            &lt;i class=&quot;fas fa-home me-2&quot;&gt;&lt;/i&gt;Accueil&#10;                        &lt;/button&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;    `;&#10;&#10;    // Ajouter le modal au DOM s'il n'existe pas&#10;    if (!document.getElementById('gameGloballyCompletedModal')) {&#10;        document.body.insertAdjacentHTML('beforeend', modalHTML);&#10;    }&#10;&#10;    // Afficher le modal&#10;    const modal = new bootstrap.Modal(document.getElementById('gameGloballyCompletedModal'));&#10;    modal.show();&#10;}&#10;&#10;// Aller à la page de récapitulatif&#10;function goToRecapPage() {&#10;    // Au lieu d'aller aux stats, démarrer une nouvelle partie&#10;    startNewGame();&#10;}&#10;&#10;// Démarrer une nouvelle partie&#10;async function startNewGame() {&#10;    try {&#10;        if (!gameSession || !gameSession.sessionId) {&#10;            // Pas de session, retourner à l'accueil&#10;            window.location.href = '/';&#10;            return;&#10;        }&#10;&#10;        // Désactiver temporairement le bouton pendant la création&#10;        const button = event?.target;&#10;        if (button) {&#10;            button.disabled = true;&#10;            button.innerHTML = '&lt;i class=&quot;fas fa-spinner fa-spin me-2&quot;&gt;&lt;/i&gt;Création en cours...';&#10;        }&#10;&#10;        // Appeler directement l'API pour créer une nouvelle partie avec un article aléatoire&#10;        const response = await fetch('/api/new-game', {&#10;            method: 'POST',&#10;            headers: { 'Content-Type': 'application/json' },&#10;            body: JSON.stringify({&#10;                current_room_code: roomCode,&#10;                session_id: gameSession.sessionId&#10;            })&#10;        });&#10;&#10;        const data = await response.json();&#10;&#10;        if (data.success) {&#10;            // Succès : recharger la page avec le nouvel article&#10;            showResult(`Nouvelle partie créée ! Article: ${data.new_article_title}`, 'success');&#10;            setTimeout(() =&gt; {&#10;                window.location.reload();&#10;            }, 1500);&#10;        } else {&#10;            // Erreur&#10;            showResult(`Erreur : ${data.error}`, 'danger');&#10;            if (button) {&#10;                button.disabled = false;&#10;                button.innerHTML = '&lt;i class=&quot;fas fa-play me-2&quot;&gt;&lt;/i&gt;Nouvelle partie';&#10;            }&#10;        }&#10;    } catch (error) {&#10;        console.error('Erreur:', error);&#10;        showResult('Erreur de connexion. Veuillez réessayer.', 'danger');&#10;        if (button) {&#10;            button.disabled = false;&#10;            button.innerHTML = '&lt;i class=&quot;fas fa-play me-2&quot;&gt;&lt;/i&gt;Nouvelle partie';&#10;        }&#10;    }&#10;}&#10;&#10;async function joinRoom(playerName) {&#10;    try {&#10;        const response = await fetch('/join-room', {&#10;            method: 'POST',&#10;            headers: { 'Content-Type': 'application/json' },&#10;            body: JSON.stringify({&#10;                room_code: roomCode,&#10;                player_name: playerName&#10;            })&#10;        });&#10;&#10;        const data = await response.json();&#10;        if (data.success) {&#10;            gameSession = {&#10;                sessionId: data.session_id,&#10;                roomCode: data.room.code,&#10;                playerName: data.player.name&#10;            };&#10;&#10;            sessionStorage.setItem('gameSession', JSON.stringify(gameSession));&#10;&#10;            // Afficher les données du jeu&#10;            document.getElementById('roomTitle').textContent = data.room.title;&#10;            updatePlayerStats(data.player);&#10;&#10;            // Récupérer les tentatives existantes du joueur&#10;            if (data.player.found_words &amp;&amp; data.player.found_words.length &gt; 0) {&#10;                data.player.found_words.forEach(word =&gt; {&#10;                    const normalizedWord = word.toLowerCase();&#10;                    if (!uniqueWords.has(normalizedWord)) {&#10;                        uniqueWords.add(normalizedWord);&#10;                        attemptCounter++;&#10;                        guessHistory.unshift({&#10;                            number: attemptCounter,&#10;                            word: word,&#10;                            found: true,&#10;                            proximity: null,&#10;                            timestamp: 'Précédent'&#10;                        });&#10;                    }&#10;                });&#10;                updateGuessHistory();&#10;            }&#10;&#10;            showGameInterface();&#10;            loadArticleContent();&#10;            updateLeaderboard();&#10;        } else {&#10;            showResult(data.error, 'danger');&#10;        }&#10;    } catch (error) {&#10;        showResult('Erreur de connexion', 'danger');&#10;    }&#10;}&#10;&#10;async function submitGuess(guess) {&#10;    if (!gameSession) return;&#10;&#10;    try {&#10;        const response = await fetch('/api/guess', {&#10;            method: 'POST',&#10;            headers: { 'Content-Type': 'application/json' },&#10;            body: JSON.stringify({&#10;                session_id: gameSession.sessionId,&#10;                guess: guess&#10;            })&#10;        });&#10;&#10;        const data = await response.json();&#10;        if (data.success) {&#10;            const result = data.result;&#10;            const normalizedGuess = guess.toLowerCase();&#10;&#10;            if (result.duplicate) {&#10;                showResult(`Le mot &quot;${result.word}&quot; a déjà été essayé !`, 'warning');&#10;                return;&#10;            }&#10;&#10;            if (!uniqueWords.has(normalizedGuess)) {&#10;                uniqueWords.add(normalizedGuess);&#10;                attemptCounter++;&#10;&#10;                guessHistory.unshift({&#10;                    number: attemptCounter,&#10;                    word: result.word,&#10;                    found: result.found,&#10;                    proximity: result.proximity,&#10;                    timestamp: new Date().toLocaleTimeString()&#10;                });&#10;&#10;                // Stocker les proximités localement pour éviter qu'elles disparaissent&#10;                if (!result.found &amp;&amp; result.proximity &gt; 0) {&#10;                    storeProximityLocally(result.word, result.proximity);&#10;                }&#10;&#10;                if (result.found) {&#10;                    if (result.gameCompleted) {&#10;                        // Victoire personnelle ! - Juste afficher le message et les confettis&#10;                        showResult(` VICTOIRE ! Vous avez trouvé &quot;${result.word}&quot; !`, 'success');&#10;                        revealAllWords();&#10;                        showConfetti();&#10;&#10;                        // Déclencher immédiatement la vérification des événements pour notifier les autres&#10;                        setTimeout(() =&gt; checkGameEvents(), 500);&#10;                    } else {&#10;                        showResult(`✅ &quot;${result.word}&quot; trouvé dans l'article !`, 'success');&#10;                        loadArticleContent();&#10;                    }&#10;                } else {&#10;                    loadArticleContent();&#10;                }&#10;&#10;                updatePlayerStats(data.player);&#10;                updateGuessHistory();&#10;                updateLeaderboard();&#10;            }&#10;        } else {&#10;            if (data.error &amp;&amp; data.error.includes('déjà')) {&#10;                showResult(`Le mot &quot;${guess}&quot; a déjà été essayé !`, 'warning');&#10;            } else {&#10;                showResult(data.error || 'Erreur lors de la soumission', 'danger');&#10;            }&#10;        }&#10;    } catch (error) {&#10;        console.error('Erreur réseau:', error);&#10;        showResult('Erreur de connexion. Veuillez réessayer.', 'danger');&#10;    }&#10;}&#10;&#10;async function loadArticleContent() {&#10;    if (!gameSession) {&#10;        console.log('Pas de session de jeu - impossible de charger l\'article');&#10;        return;&#10;    }&#10;&#10;    console.log('Chargement de l\'article pour la session:', gameSession.sessionId);&#10;&#10;    try {&#10;        // Préparer les données de proximité des dernières tentatives&#10;        const proximityData = guessHistory&#10;            .filter(guess =&gt; !guess.found &amp;&amp; guess.proximity &gt; 0)&#10;            .slice(0, 10) // Augmenter de 5 à 10 pour garder plus d'historique&#10;            .map(guess =&gt; ({&#10;                word: guess.word,&#10;                proximity: guess.proximity&#10;            }));&#10;&#10;        // Ajouter aussi les mots avec proximité stockés localement&#10;        const storedProximities = JSON.parse(localStorage.getItem(`proximities_${roomCode}`) || '[]');&#10;        storedProximities.forEach(stored =&gt; {&#10;            // Éviter les doublons&#10;            if (!proximityData.find(p =&gt; p.word === stored.word)) {&#10;                proximityData.push(stored);&#10;            }&#10;        });&#10;&#10;        console.log('Données de proximité:', proximityData);&#10;&#10;        const params = new URLSearchParams({&#10;            session_id: gameSession.sessionId,&#10;            proximity_data: JSON.stringify(proximityData)&#10;        });&#10;&#10;        console.log('URL appelée:', `/api/article-content/${roomCode}?${params}`);&#10;&#10;        const response = await fetch(`/api/article-content/${roomCode}?${params}`);&#10;        console.log('Réponse reçue:', response.status, response.statusText);&#10;&#10;        if (!response.ok) {&#10;            throw new Error(`HTTP ${response.status}: ${response.statusText}`);&#10;        }&#10;&#10;        const data = await response.json();&#10;        console.log('Données reçues:', data);&#10;&#10;        if (data.content) {&#10;            document.getElementById('articleContent').innerHTML = data.content;&#10;&#10;            // Mettre à jour la progression du titre si disponible&#10;            if (data.title_progress) {&#10;                updateTitleProgress(data.title_progress);&#10;            }&#10;&#10;            // Ajouter les event listeners pour les mots cachés après mise à jour du contenu&#10;            addHiddenWordClickListeners();&#10;&#10;            console.log('Article mis à jour avec succès');&#10;        } else {&#10;            console.error('Pas de contenu dans la réponse:', data);&#10;            document.getElementById('articleContent').innerHTML = '&lt;p class=&quot;text-danger&quot;&gt;Erreur: Aucun contenu reçu&lt;/p&gt;';&#10;        }&#10;&#10;        if (data.error) {&#10;            console.error('Erreur du serveur:', data.error);&#10;            document.getElementById('articleContent').innerHTML = `&lt;p class=&quot;text-danger&quot;&gt;Erreur: ${data.error}&lt;/p&gt;`;&#10;        }&#10;    } catch (error) {&#10;        console.error('Erreur lors du chargement de l\'article:', error);&#10;        document.getElementById('articleContent').innerHTML = `&lt;p class=&quot;text-danger&quot;&gt;Erreur de connexion: ${error.message}&lt;/p&gt;`;&#10;    }&#10;}&#10;&#10;function addHiddenWordClickListeners() {&#10;    // Ajouter des event listeners pour tous les mots cachés&#10;    const hiddenWords = document.querySelectorAll('.hidden-word, .hidden-word-with-proximity');&#10;&#10;    hiddenWords.forEach(wordElement =&gt; {&#10;        wordElement.addEventListener('click', function(e) {&#10;            showWordLengthHint(e, this);&#10;        });&#10;    });&#10;}&#10;&#10;function showWordLengthHint(event, wordElement) {&#10;    // Récupérer le mot original depuis l'attribut data-word&#10;    const originalWord = wordElement.getAttribute('data-word');&#10;    if (!originalWord) return;&#10;&#10;    // Calculer le nombre de caractères du mot original&#10;    const wordLength = originalWord.length;&#10;&#10;    // Créer l'élément tooltip&#10;    const hint = document.createElement('div');&#10;    hint.className = 'word-length-hint';&#10;    hint.textContent = `${wordLength} caractères`;&#10;&#10;    // Positionner le tooltip près du clic&#10;    const rect = wordElement.getBoundingClientRect();&#10;    hint.style.left = event.clientX + 'px';&#10;    hint.style.top = (rect.top - 50) + 'px';&#10;&#10;    // Ajouter au DOM&#10;    document.body.appendChild(hint);&#10;&#10;    // Afficher avec animation&#10;    setTimeout(() =&gt; {&#10;        hint.classList.add('show');&#10;    }, 10);&#10;&#10;    // Supprimer après 2 secondes avec animation de sortie&#10;    setTimeout(() =&gt; {&#10;        hint.classList.remove('show');&#10;        setTimeout(() =&gt; {&#10;            if (hint.parentNode) {&#10;                hint.parentNode.removeChild(hint);&#10;            }&#10;        }, 300);&#10;    }, 2000);&#10;}&#10;&#10;function getProximityText(proximity) {&#10;    if (proximity &gt;= 900) return ` TRÈS CHAUD ! (${proximity}/1000)`;&#10;    if (proximity &gt;= 700) return `️ Chaud ! (${proximity}/1000)`;&#10;    if (proximity &gt;= 500) return `️ Tiède (${proximity}/1000)`;&#10;    if (proximity &gt;= 300) return `❄️ Froid (${proximity}/1000)`;&#10;    return ` Très froid (${proximity}/1000)`;&#10;}&#10;&#10;function getProximityClass(proximity) {&#10;    if (proximity &gt;= 700) return 'proximity-high';&#10;    if (proximity &gt;= 400) return 'proximity-medium';&#10;    return 'proximity-low';&#10;}&#10;&#10;function revealAllWords() {&#10;    // R��véler tous les mots de l'article&#10;    document.querySelectorAll('.hidden-word').forEach(word =&gt; {&#10;        word.classList.remove('hidden-word');&#10;        word.classList.add('title-word'); // Style spécial pour la victoire&#10;    });&#10;}&#10;&#10;function showConfetti() {&#10;    const container = document.getElementById('confettiContainer') || document.body;&#10;&#10;    // Créer des confettis&#10;    for (let i = 0; i &lt; 50; i++) {&#10;        setTimeout(() =&gt; {&#10;            const confetti = document.createElement('div');&#10;            confetti.className = 'confetti';&#10;            confetti.style.left = Math.random() * 100 + '%';&#10;            confetti.style.background = `hsl(${Math.random() * 360}, 70%, 60%)`;&#10;            confetti.style.animationDuration = (Math.random() * 3 + 2) + 's';&#10;            confetti.style.animationDelay = Math.random() * 2 + 's';&#10;&#10;            container.appendChild(confetti);&#10;&#10;            setTimeout(() =&gt; confetti.remove(), 5000);&#10;        }, i * 100);&#10;    }&#10;}&#10;&#10;async function updateLeaderboard() {&#10;    try {&#10;        const response = await fetch(`/api/leaderboard/${roomCode}`);&#10;        const data = await response.json();&#10;&#10;        displayLeaderboard(data.leaderboard);&#10;        displayActivePlayers(data.active_players);&#10;    } catch (error) {&#10;        console.error('Erreur lors du chargement du classement:', error);&#10;    }&#10;}&#10;&#10;function showGameInterface() {&#10;    document.getElementById('connectionForm').style.display = 'none';&#10;    document.getElementById('playerStats').style.display = 'flex';&#10;    document.getElementById('guessForm').style.display = 'block';&#10;    document.getElementById('articleSection').style.display = 'block';&#10;    document.getElementById('historyPanel').style.display = 'block';&#10;}&#10;&#10;function updatePlayerStats(player) {&#10;    document.getElementById('playerScore').textContent = player.score;&#10;    document.getElementById('playerAttempts').textContent = player.attempts;&#10;    document.getElementById('foundWordsCount').textContent = player.found_words.length;&#10;    document.getElementById('playerName').textContent = gameSession.playerName;&#10;    document.getElementById('totalAttempts').textContent = attemptCounter;&#10;}&#10;&#10;function updateGuessHistory() {&#10;    const container = document.getElementById('guessHistory');&#10;&#10;    if (guessHistory.length === 0) {&#10;        container.innerHTML = '&lt;p class=&quot;text-muted text-center&quot;&gt;Aucune tentative pour le moment&lt;/p&gt;';&#10;        return;&#10;    }&#10;&#10;    container.innerHTML = guessHistory.slice(0, 20).map(guess =&gt; {&#10;        let itemClass = 'guess-item';&#10;&#10;        if (guess.found) {&#10;            itemClass += ' found';&#10;        }&#10;&#10;        return `&#10;            &lt;div class=&quot;${itemClass}&quot;&gt;&#10;                &lt;div class=&quot;guess-number&quot;&gt;${guess.number}&lt;/div&gt;&#10;                &lt;div class=&quot;guess-word&quot;&gt;${guess.word}&lt;/div&gt;&#10;                ${guess.found ? '&lt;i class=&quot;fas fa-check text-success&quot;&gt;&lt;/i&gt;' : ''}&#10;            &lt;/div&gt;&#10;        `;&#10;    }).join('');&#10;}&#10;&#10;function displayLeaderboard(leaderboard) {&#10;    const container = document.getElementById('leaderboard');&#10;    if (leaderboard.length === 0) {&#10;        container.innerHTML = '&lt;p class=&quot;text-muted text-center&quot;&gt;Aucun joueur n\'a encore terminé&lt;/p&gt;';&#10;        return;&#10;    }&#10;    container.innerHTML = leaderboard.map((player, index) =&gt; `&lt;div class=&quot;leaderboard-item p-3&quot;&gt;&lt;div class=&quot;d-flex justify-content-between align-items-center&quot;&gt;&lt;div&gt;&lt;span class=&quot;fw-bold&quot;&gt;${index + 1}. ${player.player_name}&lt;/span&gt;&lt;br&gt;&lt;small class=&quot;text-muted&quot;&gt;${player.attempts} tentatives&lt;/small&gt;&lt;/div&gt;&lt;div class=&quot;text-end&quot;&gt;&lt;span class=&quot;fw-bold text-primary&quot;&gt;${player.score}&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;`).join('');&#10;}&#10;&#10;function displayActivePlayers(players) {&#10;    const container = document.getElementById('activePlayers');&#10;    if (players.length === 0) {&#10;        container.innerHTML = '&lt;p class=&quot;text-muted text-center&quot;&gt;Aucun joueur actif&lt;/p&gt;';&#10;        return;&#10;    }&#10;    container.innerHTML = players.map(player =&gt; `&lt;div class=&quot;d-flex justify-content-between align-items-center p-2 mb-2 bg-light rounded&quot;&gt;&lt;div&gt;&lt;span class=&quot;fw-bold&quot;&gt;${player.player_name}&lt;/span&gt;&lt;br&gt;&lt;small class=&quot;text-muted&quot;&gt;${player.found_words_count} mots&lt;/small&gt;&lt;/div&gt;&lt;span class=&quot;badge bg-primary&quot;&gt;${player.score}&lt;/span&gt;&lt;/div&gt;`).join('');&#10;}&#10;&#10;function showResult(message, type) {&#10;    const container = document.getElementById('resultMessage');&#10;    container.innerHTML = `&lt;div class=&quot;alert alert-${type} alert-dismissible fade show&quot;&gt;${message}&lt;button type=&quot;button&quot; class=&quot;btn-close&quot; data-bs-dismiss=&quot;alert&quot;&gt;&lt;/button&gt;&lt;/div&gt;`;&#10;    setTimeout(() =&gt; {&#10;        const alert = container.querySelector('.alert');&#10;        if (alert) {&#10;            const bsAlert = new bootstrap.Alert(alert);&#10;            bsAlert.close();&#10;        }&#10;    }, 5000);&#10;}&#10;&#10;function showGameCompletedModal(player) {&#10;    document.getElementById('finalScore').textContent = player.score;&#10;    document.getElementById('finalAttempts').textContent = player.attempts;&#10;    const modal = new bootstrap.Modal(document.getElementById('gameCompletedModal'));&#10;    modal.show();&#10;}&#10;&#10;function copyRoomCode() {&#10;    navigator.clipboard.writeText(roomCode).then(() =&gt; {&#10;        showResult('Code de salle copié !', 'success');&#10;    }).catch(() =&gt; {&#10;        const textArea = document.createElement('textarea');&#10;        textArea.value = roomCode;&#10;        document.body.appendChild(textArea);&#10;        textArea.select();&#10;        document.execCommand('copy');&#10;        document.body.removeChild(textArea);&#10;        showResult('Code de salle copié !', 'success');&#10;    });&#10;}&#10;&#10;// Fonction pour mettre à jour l'affichage de la progression du titre&#10;function updateTitleProgress(titleProgress) {&#10;    if (!titleProgress) return;&#10;&#10;    const progressSection = document.getElementById('titleProgressSection');&#10;    const progressDisplay = document.getElementById('titleProgress');&#10;    const progressInfo = document.getElementById('titleProgressInfo');&#10;&#10;    if (progressSection &amp;&amp; progressDisplay &amp;&amp; progressInfo) {&#10;        // Afficher la section de progression du titre&#10;        progressSection.style.display = 'block';&#10;&#10;        // Mettre à jour l'affichage du titre avec les mots trouvés/manquants&#10;        progressDisplay.textContent = titleProgress.display_title;&#10;&#10;        // Mettre à jour les informations de progression&#10;        progressInfo.textContent = `${titleProgress.found_words}/${titleProgress.total_words} mots trouvés (${titleProgress.progress_percentage}%)`;&#10;&#10;        // Ajouter une animation si le titre est complet&#10;        if (titleProgress.is_complete) {&#10;            progressDisplay.style.color = '#28a745';&#10;            progressDisplay.style.fontWeight = 'bold';&#10;            progressDisplay.style.textShadow = '0 0 10px rgba(40, 167, 69, 0.5)';&#10;        }&#10;    }&#10;}&#10;&#10;async function loadGameData() {&#10;    await loadArticleContent();&#10;    await updateLeaderboard();&#10;}&#10;&lt;/script&gt;&#10;{% endblock %}&#10;" />
              <option name="updatedContent" value="{% extends 'base.html.twig' %}&#10;&#10;{% block title %}Pedantix - Salle {{ room_code }}{% endblock %}&#10;&#10;{% block stylesheets %}&#10;&lt;style&gt;&#10;    .article-content {&#10;        background: rgba(255, 255, 255, 0.95);&#10;        padding: 30px;&#10;        border-radius: 15px;&#10;        line-height: 1.8;&#10;        font-size: 16px;&#10;        text-align: justify;&#10;        max-height: 600px;&#10;        overflow-y: auto;&#10;        border: 2px solid #e0e0e0;&#10;    }&#10;&#10;    .hidden-word {&#10;        background: #d0d0d0;&#10;        color: #d0d0d0;&#10;        border-radius: 3px;&#10;        padding: 1px 2px;&#10;        cursor: pointer;&#10;        user-select: none;&#10;        transition: all 0.3s ease;&#10;    }&#10;&#10;    .hidden-word:hover {&#10;        background: #c0c0c0;&#10;        transform: scale(1.05);&#10;    }&#10;&#10;    .hidden-word-with-proximity {&#10;        /* Le fond grisé et la couleur du texte sont maintenant définis par le style inline depuis PHP */&#10;        border-radius: 3px;&#10;        padding: 1px 2px;&#10;        cursor: pointer;&#10;        user-select: none;&#10;        transition: all 0.3s ease;&#10;    }&#10;&#10;    .revealed-word {&#10;        color: #333;&#10;        background: transparent;&#10;        border-radius: 3px;&#10;        padding: 1px 2px;&#10;        font-weight: 500;&#10;        animation: revealWord 0.5s ease;&#10;    }&#10;&#10;    .revealed-word-victory {&#10;        color: #333;&#10;        background: transparent;&#10;        font-weight: normal;&#10;        /* Affichage normal après victoire - pas de surbrillance jaune */&#10;    }&#10;&#10;    @keyframes revealWord {&#10;        from {&#10;            background: #d0d0d0;&#10;            color: #d0d0d0;&#10;            transform: scale(1);&#10;        }&#10;        to {&#10;            background: transparent;&#10;            color: #333;&#10;            transform: scale(1.05);&#10;        }&#10;    }&#10;&#10;    .proximity-indicator {&#10;        background: linear-gradient(45deg, #FF5722, #D32F2F);&#10;        color: white;&#10;        padding: 8px 15px;&#10;        border-radius: 20px;&#10;        display: inline-block;&#10;        margin: 5px;&#10;        font-weight: 500;&#10;        box-shadow: 0 2px 10px rgba(255, 87, 34, 0.3);&#10;        animation: fadeInScale 0.5s ease;&#10;    }&#10;&#10;    .proximity-hot { background: #d0d0d0 !important; color: #FFD700 !important; font-weight: bold !important; }&#10;    .proximity-warm { background: #d0d0d0 !important; color: #FF8C00 !important; font-weight: bold !important; }&#10;    .proximity-cold { background: #d0d0d0 !important; color: #696969 !important; }&#10;&#10;    .confetti {&#10;        position: fixed;&#10;        top: -10px;&#10;        left: 50%;&#10;        transform: translateX(-50%);&#10;        width: 10px;&#10;        height: 10px;&#10;        background: #f0f;&#10;        animation: confetti-fall linear infinite;&#10;        z-index: 1000;&#10;    }&#10;&#10;    @keyframes confetti-fall {&#10;        to {&#10;            transform: translateX(-50%) translateY(100vh) rotate(720deg);&#10;        }&#10;    }&#10;&#10;    .guess-history {&#10;        max-height: 400px;&#10;        overflow-y: auto;&#10;        padding: 0;&#10;    }&#10;&#10;    .guess-item {&#10;        display: flex;&#10;        align-items: center;&#10;        padding: 8px 12px;&#10;        margin-bottom: 8px;&#10;        background: rgba(255, 255, 255, 0.8);&#10;        border-radius: 10px;&#10;        backdrop-filter: blur(5px);&#10;        border: 1px solid rgba(102, 126, 234, 0.2);&#10;        transition: all 0.3s ease;&#10;    }&#10;&#10;    .guess-item:hover {&#10;        background: rgba(255, 255, 255, 0.9);&#10;        transform: translateX(5px);&#10;        box-shadow: 0 3px 15px rgba(102, 126, 234, 0.3);&#10;    }&#10;&#10;    .guess-item.found {&#10;        border-left: 4px solid #28a745;&#10;        background: rgba(40, 167, 69, 0.1);&#10;    }&#10;&#10;    .guess-number {&#10;        background: linear-gradient(45deg, #667eea, #764ba2);&#10;        color: white;&#10;        border-radius: 50%;&#10;        width: 24px;&#10;        height: 24px;&#10;        display: flex;&#10;        align-items: center;&#10;        justify-content: center;&#10;        font-size: 12px;&#10;        font-weight: bold;&#10;        margin-right: 12px;&#10;        flex-shrink: 0;&#10;        box-shadow: 0 2px 5px rgba(102, 126, 234, 0.3);&#10;    }&#10;&#10;    .guess-item.found .guess-number {&#10;        background: linear-gradient(45deg, #28a745, #20c997);&#10;    }&#10;&#10;    .guess-word {&#10;        font-weight: 500;&#10;        color: #333;&#10;        flex-grow: 1;&#10;    }&#10;&#10;    .guess-item.found .guess-word {&#10;        color: #28a745;&#10;        font-weight: 600;&#10;    }&#10;&#10;    .title-word {&#10;        background: linear-gradient(45deg, #FFD700, #FFA500) !important;&#10;        color: #333 !important;&#10;        font-weight: bold !important;&#10;        font-size: 1.1em !important;&#10;        padding: 2px 4px !important;&#10;        box-shadow: 0 0 10px rgba(255, 215, 0, 0.5) !important;&#10;    }&#10;&#10;    .word-length-hint {&#10;        position: absolute;&#10;        background: rgba(0, 0, 0, 0.8);&#10;        color: white;&#10;        padding: 8px 12px;&#10;        border-radius: 6px;&#10;        font-size: 14px;&#10;        font-weight: bold;&#10;        pointer-events: none;&#10;        z-index: 10000;&#10;        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.3);&#10;        opacity: 0;&#10;        transform: translateY(-10px);&#10;        transition: all 0.3s ease;&#10;    }&#10;&#10;    .word-length-hint.show {&#10;        opacity: 1;&#10;        transform: translateY(0);&#10;    }&#10;&#10;    .word-length-hint::after {&#10;        content: '';&#10;        position: absolute;&#10;        top: 100%;&#10;        left: 50%;&#10;        margin-left: -5px;&#10;        width: 0;&#10;        height: 0;&#10;        border: 5px solid transparent;&#10;        border-top-color: rgba(0, 0, 0, 0.8);&#10;    }&#10;&#10;    .collapse-toggle {&#10;        cursor: pointer;&#10;        user-select: none;&#10;        transition: all 0.3s ease;&#10;    }&#10;&#10;    .collapse-toggle:hover {&#10;        color: #667eea;&#10;    }&#10;&#10;    .collapse-toggle .fas {&#10;        transition: transform 0.3s ease;&#10;    }&#10;&#10;    .collapse-toggle[aria-expanded=&quot;false&quot;] .fas {&#10;        transform: rotate(-90deg);&#10;    }&#10;&#10;    @media (max-width: 1200px) {&#10;        .main-game-content {&#10;            margin-left: 0;&#10;        }&#10;    }&#10;&lt;/style&gt;&#10;{% endblock %}&#10;&#10;{% block body %}&#10;&lt;div class=&quot;row&quot;&gt;&#10;    &lt;!-- Zone de jeu principale --&gt;&#10;    &lt;div class=&quot;col-lg-8&quot;&gt;&#10;        &lt;div class=&quot;game-container p-4&quot;&gt;&#10;            &lt;!-- En-tête de la salle --&gt;&#10;            &lt;div class=&quot;d-flex justify-content-between align-items-center mb-4&quot;&gt;&#10;                &lt;div&gt;&#10;                    &lt;h2 id=&quot;roomTitle&quot;&gt;Chargement...&lt;/h2&gt;&#10;                    &lt;p class=&quot;text-muted mb-0&quot;&gt;Code de salle: &lt;strong&gt;{{ room_code }}&lt;/strong&gt;&lt;/p&gt;&#10;                &lt;/div&gt;&#10;                &lt;button class=&quot;btn btn-outline-primary&quot; onclick=&quot;copyRoomCode()&quot;&gt;&#10;                    &lt;i class=&quot;fas fa-copy me-2&quot;&gt;&lt;/i&gt;Partager&#10;                &lt;/button&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;!-- Statistiques du joueur --&gt;&#10;            &lt;div class=&quot;row mb-4&quot; id=&quot;playerStats&quot; style=&quot;display: none;&quot;&gt;&#10;                &lt;div class=&quot;col-md-3 col-6&quot;&gt;&#10;                    &lt;div class=&quot;text-center p-3 bg-light rounded&quot;&gt;&#10;                        &lt;h4 id=&quot;playerScore&quot; class=&quot;text-primary mb-0&quot;&gt;0&lt;/h4&gt;&#10;                        &lt;small class=&quot;text-muted&quot;&gt;Score&lt;/small&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;col-md-3 col-6&quot;&gt;&#10;                    &lt;div class=&quot;text-center p-3 bg-light rounded&quot;&gt;&#10;                        &lt;h4 id=&quot;playerAttempts&quot; class=&quot;text-info mb-0&quot;&gt;0&lt;/h4&gt;&#10;                        &lt;small class=&quot;text-muted&quot;&gt;Tentatives&lt;/small&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;col-md-3 col-6&quot;&gt;&#10;                    &lt;div class=&quot;text-center p-3 bg-light rounded&quot;&gt;&#10;                        &lt;h4 id=&quot;foundWordsCount&quot; class=&quot;text-success mb-0&quot;&gt;0&lt;/h4&gt;&#10;                        &lt;small class=&quot;text-muted&quot;&gt;Mots trouvés&lt;/small&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;col-md-3 col-6&quot;&gt;&#10;                    &lt;div class=&quot;text-center p-3 bg-light rounded&quot;&gt;&#10;                        &lt;h4 id=&quot;playerName&quot; class=&quot;text-warning mb-0&quot;&gt;-&lt;/h4&gt;&#10;                        &lt;small class=&quot;text-muted&quot;&gt;Joueur&lt;/small&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;!-- Formulaire de saisie --&gt;&#10;            &lt;form id=&quot;guessForm&quot; style=&quot;display: none;&quot;&gt;&#10;                &lt;div class=&quot;input-group input-group-lg mb-4&quot;&gt;&#10;                    &lt;input type=&quot;text&quot; class=&quot;form-control word-input&quot; id=&quot;wordGuess&quot;&#10;                           placeholder=&quot;Entrez votre mot...&quot; autocomplete=&quot;off&quot;&gt;&#10;                    &lt;button class=&quot;btn btn-primary&quot; type=&quot;submit&quot;&gt;&#10;                        &lt;i class=&quot;fas fa-search me-2&quot;&gt;&lt;/i&gt;Deviner&#10;                    &lt;/button&gt;&#10;                &lt;/div&gt;&#10;            &lt;/form&gt;&#10;&#10;            &lt;!-- Zone de connexion --&gt;&#10;            &lt;div id=&quot;connectionForm&quot;&gt;&#10;                &lt;div class=&quot;text-center mb-4&quot;&gt;&#10;                    &lt;h4&gt;Rejoindre la salle {{ room_code }}&lt;/h4&gt;&#10;                &lt;/div&gt;&#10;                &lt;form id=&quot;joinRoomForm&quot;&gt;&#10;                    &lt;div class=&quot;input-group input-group-lg mb-3&quot;&gt;&#10;                        &lt;input type=&quot;text&quot; class=&quot;form-control word-input&quot; id=&quot;playerNameInput&quot;&#10;                               placeholder=&quot;Votre nom...&quot; maxlength=&quot;20&quot; required&gt;&#10;                        &lt;button class=&quot;btn btn-primary&quot; type=&quot;submit&quot;&gt;&#10;                            &lt;i class=&quot;fas fa-sign-in-alt me-2&quot;&gt;&lt;/i&gt;Rejoindre&#10;                        &lt;/button&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/form&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;!-- Messages de résultat --&gt;&#10;            &lt;div id=&quot;resultMessage&quot; class=&quot;mb-4&quot;&gt;&lt;/div&gt;&#10;&#10;            &lt;!-- Article Wikipedia avec mots grisés --&gt;&#10;            &lt;div id=&quot;articleSection&quot; style=&quot;display: none;&quot;&gt;&#10;                &lt;!-- Progression du titre à deviner --&gt;&#10;                &lt;div id=&quot;titleProgressSection&quot; class=&quot;mb-4&quot; style=&quot;display: none;&quot;&gt;&#10;                    &lt;h5 class=&quot;text-center mb-3&quot;&gt;&#10;                        &lt;i class=&quot;fas fa-bullseye text-warning me-2&quot;&gt;&lt;/i&gt;Mot/Titre à deviner :&#10;                    &lt;/h5&gt;&#10;                    &lt;div class=&quot;text-center p-3 bg-light rounded&quot;&gt;&#10;                        &lt;h3 id=&quot;titleProgress&quot; class=&quot;mb-0 text-primary font-monospace&quot;&gt;&lt;/h3&gt;&#10;                        &lt;small id=&quot;titleProgressInfo&quot; class=&quot;text-muted&quot;&gt;&lt;/small&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;                &lt;h5 class=&quot;mb-3&quot;&gt;Article Wikipedia :&lt;/h5&gt;&#10;                &lt;div id=&quot;articleContent&quot; class=&quot;article-content&quot;&gt;&#10;                    Chargement de l'article...&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;    &lt;/div&gt;&#10;&#10;    &lt;!-- Sidebar avec historique, classement et joueurs actifs --&gt;&#10;    &lt;div class=&quot;col-lg-4&quot;&gt;&#10;        &lt;!-- Historique des tentatives --&gt;&#10;        &lt;div class=&quot;game-container p-4 mb-4&quot; id=&quot;historyPanel&quot; style=&quot;display: none;&quot;&gt;&#10;            &lt;div class=&quot;d-flex justify-content-between align-items-center mb-3&quot;&gt;&#10;                &lt;h5 class=&quot;mb-0&quot;&gt;&#10;                    &lt;i class=&quot;fas fa-history text-info me-2&quot;&gt;&lt;/i&gt;Historique&#10;                    &lt;span id=&quot;totalAttempts&quot; class=&quot;badge bg-primary ms-2&quot;&gt;0&lt;/span&gt;&#10;                &lt;/h5&gt;&#10;                &lt;span class=&quot;collapse-toggle&quot; data-bs-toggle=&quot;collapse&quot; data-bs-target=&quot;#historyCollapse&quot; aria-expanded=&quot;true&quot;&gt;&#10;                    &lt;i class=&quot;fas fa-chevron-down&quot;&gt;&lt;/i&gt;&#10;                &lt;/span&gt;&#10;            &lt;/div&gt;&#10;            &lt;div class=&quot;collapse show&quot; id=&quot;historyCollapse&quot;&gt;&#10;                &lt;div id=&quot;guessHistory&quot; class=&quot;guess-history&quot;&gt;&#10;                    &lt;p class=&quot;text-muted text-center&quot;&gt;Aucune tentative pour le moment&lt;/p&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;!-- Classement --&gt;&#10;        &lt;div class=&quot;game-container p-4 mb-4&quot;&gt;&#10;            &lt;div class=&quot;d-flex justify-content-between align-items-center mb-3&quot;&gt;&#10;                &lt;h5 class=&quot;mb-0&quot;&gt;&#10;                    &lt;i class=&quot;fas fa-trophy text-warning me-2&quot;&gt;&lt;/i&gt;Classement&#10;                &lt;/h5&gt;&#10;                &lt;span class=&quot;collapse-toggle&quot; data-bs-toggle=&quot;collapse&quot; data-bs-target=&quot;#leaderboardCollapse&quot; aria-expanded=&quot;true&quot;&gt;&#10;                    &lt;i class=&quot;fas fa-chevron-down&quot;&gt;&lt;/i&gt;&#10;                &lt;/span&gt;&#10;            &lt;/div&gt;&#10;            &lt;div class=&quot;collapse show&quot; id=&quot;leaderboardCollapse&quot;&gt;&#10;                &lt;div id=&quot;leaderboard&quot;&gt;&#10;                    &lt;p class=&quot;text-muted text-center&quot;&gt;Chargement...&lt;/p&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;!-- Joueurs actifs --&gt;&#10;        &lt;div class=&quot;game-container p-4&quot;&gt;&#10;            &lt;div class=&quot;d-flex justify-content-between align-items-center mb-3&quot;&gt;&#10;                &lt;h5 class=&quot;mb-0&quot;&gt;&#10;                    &lt;i class=&quot;fas fa-users text-success me-2&quot;&gt;&lt;/i&gt;Joueurs actifs&#10;                &lt;/h5&gt;&#10;                &lt;span class=&quot;collapse-toggle&quot; data-bs-toggle=&quot;collapse&quot; data-bs-target=&quot;#playersCollapse&quot; aria-expanded=&quot;true&quot;&gt;&#10;                    &lt;i class=&quot;fas fa-chevron-down&quot;&gt;&lt;/i&gt;&#10;                &lt;/span&gt;&#10;            &lt;/div&gt;&#10;            &lt;div class=&quot;collapse show&quot; id=&quot;playersCollapse&quot;&gt;&#10;                &lt;div id=&quot;activePlayers&quot;&gt;&#10;                    &lt;p class=&quot;text-muted text-center&quot;&gt;Chargement...&lt;/p&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;    &lt;/div&gt;&#10;&lt;/div&gt;&#10;&#10;&lt;!-- Modal de fin de jeu --&gt;&#10;&lt;div class=&quot;modal fade&quot; id=&quot;gameCompletedModal&quot; tabindex=&quot;-1&quot;&gt;&#10;    &lt;div class=&quot;modal-dialog modal-lg&quot;&gt;&#10;        &lt;div class=&quot;modal-content&quot;&gt;&#10;            &lt;div class=&quot;modal-header bg-success text-white&quot;&gt;&#10;                &lt;h5 class=&quot;modal-title&quot;&gt;&#10;                    &lt;i class=&quot;fas fa-trophy me-2&quot;&gt;&lt;/i&gt;Félicitations !&#10;                &lt;/h5&gt;&#10;            &lt;/div&gt;&#10;            &lt;div class=&quot;modal-body text-center&quot;&gt;&#10;                &lt;h3&gt;���� Vous avez trouvé le mot-titre ! &lt;/h3&gt;&#10;                &lt;p class=&quot;lead&quot;&gt;Score final: &lt;span id=&quot;finalScore&quot; class=&quot;fw-bold text-success&quot;&gt;&lt;/span&gt;&lt;/p&gt;&#10;                &lt;p&gt;Tentatives: &lt;span id=&quot;finalAttempts&quot; class=&quot;fw-bold&quot;&gt;&lt;/span&gt;&lt;/p&gt;&#10;                &lt;div id=&quot;confettiContainer&quot;&gt;&lt;/div&gt;&#10;            &lt;/div&gt;&#10;            &lt;div class=&quot;modal-footer&quot;&gt;&#10;                &lt;button type=&quot;button&quot; class=&quot;btn btn-primary&quot; onclick=&quot;location.reload()&quot;&gt;&#10;                    Rejouer&#10;                &lt;/button&gt;&#10;                &lt;button type=&quot;button&quot; class=&quot;btn btn-secondary&quot; onclick=&quot;location.href='/'&quot;&gt;&#10;                    Accueil&#10;                &lt;/button&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;    &lt;/div&gt;&#10;&lt;/div&gt;&#10;{% endblock %}&#10;&#10;{% block javascripts %}&#10;&lt;script&gt;&#10;let gameSession = null;&#10;let roomCode = '{{ room_code }}';&#10;let guessHistory = [];&#10;let uniqueWords = new Set();&#10;let attemptCounter = 0;&#10;let lastEventId = 0; // Pour suivre les événements temps réel&#10;let gameEventsInterval = null; // Interval pour les événements&#10;&#10;document.addEventListener('DOMContentLoaded', function() {&#10;    // Vérifier si on a déjà une session stockée&#10;    const storedSession = sessionStorage.getItem('gameSession');&#10;    if (storedSession) {&#10;        const sessionData = JSON.parse(storedSession);&#10;        if (sessionData.roomCode === roomCode) {&#10;            gameSession = sessionData;&#10;            showGameInterface();&#10;            loadGameData();&#10;        }&#10;    }&#10;&#10;    // Gérer la connexion à la salle&#10;    document.getElementById('joinRoomForm').addEventListener('submit', async function(e) {&#10;        e.preventDefault();&#10;        const playerName = document.getElementById('playerNameInput').value;&#10;        await joinRoom(playerName);&#10;    });&#10;&#10;    // Gérer les devinettes&#10;    document.getElementById('guessForm').addEventListener('submit', async function(e) {&#10;        e.preventDefault();&#10;        const guess = document.getElementById('wordGuess').value.trim().toLowerCase();&#10;        if (guess) {&#10;            // Vérifier si le mot a déjà été essayé&#10;            if (uniqueWords.has(guess)) {&#10;                showResult(`Le mot &quot;${guess}&quot; a déjà été essayé !`, 'warning');&#10;                document.getElementById('wordGuess').value = '';&#10;                return;&#10;            }&#10;&#10;            await submitGuess(guess);&#10;            document.getElementById('wordGuess').value = '';&#10;        }&#10;    });&#10;&#10;    // Actualiser le classement périodiquement&#10;    setInterval(updateLeaderboard, 10000); // Toutes les 10 secondes&#10;&#10;    // Actualiser l'article périodiquement pour voir les mots trouvés par d'autres joueurs&#10;    setInterval(loadArticleContent, 5000); // Toutes les 5 secondes&#10;&#10;    // Démarrer la surveillance des événements temps réel&#10;    startGameEventsPolling();&#10;});&#10;&#10;// Fonction pour surveiller les événements de jeu en temps réel&#10;function startGameEventsPolling() {&#10;    if (gameEventsInterval) {&#10;        clearInterval(gameEventsInterval);&#10;    }&#10;&#10;    gameEventsInterval = setInterval(async () =&gt; {&#10;        if (gameSession) {&#10;            await checkGameEvents();&#10;        }&#10;    }, 3000); // Vérifier toutes les 3 secondes&#10;}&#10;&#10;// Vérifier les nouveaux év��nements de jeu&#10;async function checkGameEvents() {&#10;    if (!gameSession) return;&#10;&#10;    try {&#10;        const response = await fetch(`/api/game-events/${roomCode}?session_id=${gameSession.sessionId}&amp;last_event_id=${lastEventId}`);&#10;        const data = await response.json();&#10;&#10;        if (data.events &amp;&amp; data.events.length &gt; 0) {&#10;            // Traiter chaque nouvel événement&#10;            data.events.forEach(event =&gt; {&#10;                handleGameEvent(event);&#10;            });&#10;&#10;            lastEventId = data.last_event_id;&#10;        }&#10;&#10;        // Vérifier l'état global du jeu&#10;        if (data.game_status) {&#10;            handleGameStatus(data.game_status);&#10;        }&#10;    } catch (error) {&#10;        console.error('Erreur lors de la vérification des événements:', error);&#10;    }&#10;}&#10;&#10;// Gérer un événement de jeu&#10;function handleGameEvent(event) {&#10;    switch (event.type) {&#10;        case 'player_won':&#10;            // Afficher une notification quand un autre joueur trouve le mot&#10;            if (event.player_name !== gameSession.playerName) {&#10;                showPlayerWonNotification(event);&#10;            }&#10;            break;&#10;        case 'game_completed':&#10;            // Le jeu est terminé globalement&#10;            handleGameCompleted(event);&#10;            break;&#10;    }&#10;}&#10;&#10;// Afficher une notification quand un joueur trouve le mot&#10;function showPlayerWonNotification(event) {&#10;    const notification = document.createElement('div');&#10;    notification.className = 'alert alert-success alert-dismissible fade show position-fixed';&#10;    notification.style.cssText = 'top: 20px; right: 20px; z-index: 9999; min-width: 300px;';&#10;    notification.innerHTML = `&#10;        &lt;strong&gt;&lt;i class=&quot;fas fa-trophy text-warning me-2&quot;&gt;&lt;/i&gt;${event.message}&lt;/strong&gt;&#10;        &lt;br&gt;&lt;small&gt;Score: ${event.score} - ${event.attempts} tentatives&lt;/small&gt;&#10;        &lt;button type=&quot;button&quot; class=&quot;btn-close&quot; data-bs-dismiss=&quot;alert&quot;&gt;&lt;/button&gt;&#10;    `;&#10;&#10;    document.body.appendChild(notification);&#10;&#10;    // Animation d'entrée&#10;    setTimeout(() =&gt; {&#10;        notification.classList.add('show');&#10;    }, 100);&#10;&#10;    // Supprimer automatiquement après 5 secondes&#10;    setTimeout(() =&gt; {&#10;        notification.remove();&#10;    }, 5000);&#10;&#10;    // Mettre à jour le classement&#10;    updateLeaderboard();&#10;}&#10;&#10;// Gérer l'état global du jeu&#10;function handleGameStatus(gameStatus) {&#10;    if (gameStatus.is_completed) {&#10;        // Arrêter la surveillance des événements&#10;        if (gameEventsInterval) {&#10;            clearInterval(gameEventsInterval);&#10;            gameEventsInterval = null;&#10;        }&#10;&#10;        // Afficher le modal de fin de partie globale pour tous les modes&#10;        showGameGloballyCompletedModal(gameStatus);&#10;    }&#10;}&#10;&#10;// Modal de fin de partie globale (tous les joueurs ont terminé)&#10;function showGameGloballyCompletedModal(gameStatus) {&#10;    // Créer le modal de fin de partie globale&#10;    let modalContent = '';&#10;    &#10;    if (gameStatus.game_mode === 'cooperation') {&#10;        // Mode coopération - message d'équipe&#10;        modalContent = `&#10;            &lt;div class=&quot;modal-body text-center&quot;&gt;&#10;                &lt;h3&gt; L'équipe a trouvé le mot-titre ! &lt;/h3&gt;&#10;                ${gameStatus.team &amp;&amp; gameStatus.team.length &gt; 0 ? `&#10;                    &lt;div class=&quot;alert alert-success&quot;&gt;&#10;                        &lt;h4&gt;&lt;i class=&quot;fas fa-users text-success me-2&quot;&gt;&lt;/i&gt;Équipe gagnante :&lt;/h4&gt;&#10;                        ${gameStatus.team.map(player =&gt; `&#10;                            &lt;p class=&quot;mb-1&quot;&gt;${player.player_name} - Score: ${player.score} (${player.attempts} tentatives)&lt;/p&gt;&#10;                        `).join('')}&#10;                    &lt;/div&gt;&#10;                ` : ''}&#10;                &lt;p class=&quot;lead&quot;&gt;Félicitations à toute l'équipe ! Que souhaitez-vous faire maintenant ?&lt;/p&gt;&#10;            &lt;/div&gt;&#10;        `;&#10;    } else {&#10;        // Mode compétition - message de gagnant&#10;        modalContent = `&#10;            &lt;div class=&quot;modal-body text-center&quot;&gt;&#10;                &lt;h3&gt; Tous les joueurs ont trouvé le mot-titre ! &lt;/h3&gt;&#10;                ${gameStatus.winner ? `&#10;                    &lt;div class=&quot;alert alert-warning&quot;&gt;&#10;                        &lt;h4&gt;&lt;i class=&quot;fas fa-crown text-warning me-2&quot;&gt;&lt;/i&gt;Gagnant: ${gameStatus.winner.player_name}&lt;/h4&gt;&#10;                        &lt;p&gt;Score: ${gameStatus.winner.score} - ${gameStatus.winner.attempts} tentatives&lt;/p&gt;&#10;                    &lt;/div&gt;&#10;                ` : ''}&#10;                &lt;p class=&quot;lead&quot;&gt;Que souhaitez-vous faire maintenant ?&lt;/p&gt;&#10;            &lt;/div&gt;&#10;        `;&#10;    }&#10;&#10;    const modalHTML = `&#10;        &lt;div class=&quot;modal fade&quot; id=&quot;gameGloballyCompletedModal&quot; tabindex=&quot;-1&quot; data-bs-backdrop=&quot;static&quot;&gt;&#10;            &lt;div class=&quot;modal-dialog modal-lg&quot;&gt;&#10;                &lt;div class=&quot;modal-content&quot;&gt;&#10;                    &lt;div class=&quot;modal-header ${gameStatus.game_mode === 'cooperation' ? 'bg-success' : 'bg-primary'} text-white&quot;&gt;&#10;                        &lt;h5 class=&quot;modal-title&quot;&gt;&#10;                            &lt;i class=&quot;fas fa-${gameStatus.game_mode === 'cooperation' ? 'hands-helping' : 'flag-checkered'} me-2&quot;&gt;&lt;/i&gt;Partie terminée !&#10;                        &lt;/h5&gt;&#10;                    &lt;/div&gt;&#10;                    ${modalContent}&#10;                    &lt;div class=&quot;modal-footer justify-content-center&quot;&gt;&#10;                        &lt;button type=&quot;button&quot; class=&quot;btn btn-success btn-lg me-3&quot; onclick=&quot;startNewGame()&quot;&gt;&#10;                            &lt;i class=&quot;fas fa-play me-2&quot;&gt;&lt;/i&gt;Nouvelle partie&#10;                        &lt;/button&gt;&#10;                        &lt;button type=&quot;button&quot; class=&quot;btn btn-secondary btn-lg&quot; onclick=&quot;window.location.href='/'&quot;&gt;&#10;                            &lt;i class=&quot;fas fa-home me-2&quot;&gt;&lt;/i&gt;Accueil&#10;                        &lt;/button&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;    `;&#10;&#10;    // Ajouter le modal au DOM s'il n'existe pas&#10;    if (!document.getElementById('gameGloballyCompletedModal')) {&#10;        document.body.insertAdjacentHTML('beforeend', modalHTML);&#10;    }&#10;&#10;    // Afficher le modal&#10;    const modal = new bootstrap.Modal(document.getElementById('gameGloballyCompletedModal'));&#10;    modal.show();&#10;}&#10;&#10;// Aller à la page de récapitulatif&#10;function goToRecapPage() {&#10;    // Au lieu d'aller aux stats, démarrer une nouvelle partie&#10;    startNewGame();&#10;}&#10;&#10;// Démarrer une nouvelle partie&#10;async function startNewGame() {&#10;    try {&#10;        if (!gameSession || !gameSession.sessionId) {&#10;            // Pas de session, retourner à l'accueil&#10;            window.location.href = '/';&#10;            return;&#10;        }&#10;&#10;        // Désactiver temporairement le bouton pendant la création&#10;        const button = event?.target;&#10;        if (button) {&#10;            button.disabled = true;&#10;            button.innerHTML = '&lt;i class=&quot;fas fa-spinner fa-spin me-2&quot;&gt;&lt;/i&gt;Création en cours...';&#10;        }&#10;&#10;        // Appeler directement l'API pour créer une nouvelle partie avec un article aléatoire&#10;        const response = await fetch('/api/new-game', {&#10;            method: 'POST',&#10;            headers: { 'Content-Type': 'application/json' },&#10;            body: JSON.stringify({&#10;                current_room_code: roomCode,&#10;                session_id: gameSession.sessionId&#10;            })&#10;        });&#10;&#10;        const data = await response.json();&#10;&#10;        if (data.success) {&#10;            // Succès : recharger la page avec le nouvel article&#10;            showResult(`Nouvelle partie créée ! Article: ${data.new_article_title}`, 'success');&#10;            setTimeout(() =&gt; {&#10;                window.location.reload();&#10;            }, 1500);&#10;        } else {&#10;            // Erreur&#10;            showResult(`Erreur : ${data.error}`, 'danger');&#10;            if (button) {&#10;                button.disabled = false;&#10;                button.innerHTML = '&lt;i class=&quot;fas fa-play me-2&quot;&gt;&lt;/i&gt;Nouvelle partie';&#10;            }&#10;        }&#10;    } catch (error) {&#10;        console.error('Erreur:', error);&#10;        showResult('Erreur de connexion. Veuillez réessayer.', 'danger');&#10;        if (button) {&#10;            button.disabled = false;&#10;            button.innerHTML = '&lt;i class=&quot;fas fa-play me-2&quot;&gt;&lt;/i&gt;Nouvelle partie';&#10;        }&#10;    }&#10;}&#10;&#10;async function joinRoom(playerName) {&#10;    try {&#10;        const response = await fetch('/join-room', {&#10;            method: 'POST',&#10;            headers: { 'Content-Type': 'application/json' },&#10;            body: JSON.stringify({&#10;                room_code: roomCode,&#10;                player_name: playerName&#10;            })&#10;        });&#10;&#10;        const data = await response.json();&#10;        if (data.success) {&#10;            gameSession = {&#10;                sessionId: data.session_id,&#10;                roomCode: data.room.code,&#10;                playerName: data.player.name&#10;            };&#10;&#10;            sessionStorage.setItem('gameSession', JSON.stringify(gameSession));&#10;&#10;            // Afficher les données du jeu&#10;            document.getElementById('roomTitle').textContent = data.room.title;&#10;            updatePlayerStats(data.player);&#10;&#10;            // Récupérer les tentatives existantes du joueur&#10;            if (data.player.found_words &amp;&amp; data.player.found_words.length &gt; 0) {&#10;                data.player.found_words.forEach(word =&gt; {&#10;                    const normalizedWord = word.toLowerCase();&#10;                    if (!uniqueWords.has(normalizedWord)) {&#10;                        uniqueWords.add(normalizedWord);&#10;                        attemptCounter++;&#10;                        guessHistory.unshift({&#10;                            number: attemptCounter,&#10;                            word: word,&#10;                            found: true,&#10;                            proximity: null,&#10;                            timestamp: 'Précédent'&#10;                        });&#10;                    }&#10;                });&#10;                updateGuessHistory();&#10;            }&#10;&#10;            showGameInterface();&#10;            loadArticleContent();&#10;            updateLeaderboard();&#10;        } else {&#10;            showResult(data.error, 'danger');&#10;        }&#10;    } catch (error) {&#10;        showResult('Erreur de connexion', 'danger');&#10;    }&#10;}&#10;&#10;async function submitGuess(guess) {&#10;    if (!gameSession) return;&#10;&#10;    try {&#10;        const response = await fetch('/api/guess', {&#10;            method: 'POST',&#10;            headers: { 'Content-Type': 'application/json' },&#10;            body: JSON.stringify({&#10;                session_id: gameSession.sessionId,&#10;                guess: guess&#10;            })&#10;        });&#10;&#10;        const data = await response.json();&#10;        if (data.success) {&#10;            const result = data.result;&#10;            const normalizedGuess = guess.toLowerCase();&#10;&#10;            if (result.duplicate) {&#10;                showResult(`Le mot &quot;${result.word}&quot; a déjà été essayé !`, 'warning');&#10;                return;&#10;            }&#10;&#10;            if (!uniqueWords.has(normalizedGuess)) {&#10;                uniqueWords.add(normalizedGuess);&#10;                attemptCounter++;&#10;&#10;                guessHistory.unshift({&#10;                    number: attemptCounter,&#10;                    word: result.word,&#10;                    found: result.found,&#10;                    proximity: result.proximity,&#10;                    timestamp: new Date().toLocaleTimeString()&#10;                });&#10;&#10;                // Stocker les proximités localement pour éviter qu'elles disparaissent&#10;                if (!result.found &amp;&amp; result.proximity &gt; 0) {&#10;                    storeProximityLocally(result.word, result.proximity);&#10;                }&#10;&#10;                if (result.found) {&#10;                    if (result.gameCompleted) {&#10;                        // Victoire personnelle ! - Juste afficher le message et les confettis&#10;                        showResult(` VICTOIRE ! Vous avez trouvé &quot;${result.word}&quot; !`, 'success');&#10;                        revealAllWords();&#10;                        showConfetti();&#10;&#10;                        // Déclencher immédiatement la vérification des événements pour notifier les autres&#10;                        setTimeout(() =&gt; checkGameEvents(), 500);&#10;                    } else {&#10;                        showResult(`✅ &quot;${result.word}&quot; trouvé dans l'article !`, 'success');&#10;                        loadArticleContent();&#10;                    }&#10;                } else {&#10;                    loadArticleContent();&#10;                }&#10;&#10;                updatePlayerStats(data.player);&#10;                updateGuessHistory();&#10;                updateLeaderboard();&#10;            }&#10;        } else {&#10;            if (data.error &amp;&amp; data.error.includes('déjà')) {&#10;                showResult(`Le mot &quot;${guess}&quot; a déjà été essayé !`, 'warning');&#10;            } else {&#10;                showResult(data.error || 'Erreur lors de la soumission', 'danger');&#10;            }&#10;        }&#10;    } catch (error) {&#10;        console.error('Erreur réseau:', error);&#10;        showResult('Erreur de connexion. Veuillez réessayer.', 'danger');&#10;    }&#10;}&#10;&#10;async function loadArticleContent() {&#10;    if (!gameSession) {&#10;        console.log('Pas de session de jeu - impossible de charger l\'article');&#10;        return;&#10;    }&#10;&#10;    console.log('Chargement de l\'article pour la session:', gameSession.sessionId);&#10;&#10;    try {&#10;        // Préparer les données de proximité des dernières tentatives&#10;        const proximityData = guessHistory&#10;            .filter(guess =&gt; !guess.found &amp;&amp; guess.proximity &gt; 0)&#10;            .slice(0, 10) // Augmenter de 5 à 10 pour garder plus d'historique&#10;            .map(guess =&gt; ({&#10;                word: guess.word,&#10;                proximity: guess.proximity&#10;            }));&#10;&#10;        // Ajouter aussi les mots avec proximité stockés localement&#10;        const storedProximities = JSON.parse(localStorage.getItem(`proximities_${roomCode}`) || '[]');&#10;        storedProximities.forEach(stored =&gt; {&#10;            // Éviter les doublons&#10;            if (!proximityData.find(p =&gt; p.word === stored.word)) {&#10;                proximityData.push(stored);&#10;            }&#10;        });&#10;&#10;        console.log('Données de proximité:', proximityData);&#10;&#10;        const params = new URLSearchParams({&#10;            session_id: gameSession.sessionId,&#10;            proximity_data: JSON.stringify(proximityData)&#10;        });&#10;&#10;        console.log('URL appelée:', `/api/article-content/${roomCode}?${params}`);&#10;&#10;        const response = await fetch(`/api/article-content/${roomCode}?${params}`);&#10;        console.log('Réponse reçue:', response.status, response.statusText);&#10;&#10;        if (!response.ok) {&#10;            throw new Error(`HTTP ${response.status}: ${response.statusText}`);&#10;        }&#10;&#10;        const data = await response.json();&#10;        console.log('Données reçues:', data);&#10;&#10;        if (data.content) {&#10;            document.getElementById('articleContent').innerHTML = data.content;&#10;&#10;            // Mettre à jour la progression du titre si disponible&#10;            if (data.title_progress) {&#10;                updateTitleProgress(data.title_progress);&#10;            }&#10;&#10;            // Ajouter les event listeners pour les mots cachés après mise à jour du contenu&#10;            addHiddenWordClickListeners();&#10;&#10;            console.log('Article mis à jour avec succès');&#10;        } else {&#10;            console.error('Pas de contenu dans la réponse:', data);&#10;            document.getElementById('articleContent').innerHTML = '&lt;p class=&quot;text-danger&quot;&gt;Erreur: Aucun contenu reçu&lt;/p&gt;';&#10;        }&#10;&#10;        if (data.error) {&#10;            console.error('Erreur du serveur:', data.error);&#10;            document.getElementById('articleContent').innerHTML = `&lt;p class=&quot;text-danger&quot;&gt;Erreur: ${data.error}&lt;/p&gt;`;&#10;        }&#10;    } catch (error) {&#10;        console.error('Erreur lors du chargement de l\'article:', error);&#10;        document.getElementById('articleContent').innerHTML = `&lt;p class=&quot;text-danger&quot;&gt;Erreur de connexion: ${error.message}&lt;/p&gt;`;&#10;    }&#10;}&#10;&#10;function addHiddenWordClickListeners() {&#10;    // Ajouter des event listeners pour tous les mots cachés&#10;    const hiddenWords = document.querySelectorAll('.hidden-word, .hidden-word-with-proximity');&#10;&#10;    hiddenWords.forEach(wordElement =&gt; {&#10;        wordElement.addEventListener('click', function(e) {&#10;            showWordLengthHint(e, this);&#10;        });&#10;    });&#10;}&#10;&#10;function showWordLengthHint(event, wordElement) {&#10;    // Récupérer le mot original depuis l'attribut data-word&#10;    const originalWord = wordElement.getAttribute('data-word');&#10;    if (!originalWord) return;&#10;&#10;    // Calculer le nombre de caractères du mot original&#10;    const wordLength = originalWord.length;&#10;&#10;    // Créer l'élément tooltip&#10;    const hint = document.createElement('div');&#10;    hint.className = 'word-length-hint';&#10;    hint.textContent = `${wordLength} caractères`;&#10;&#10;    // Positionner le tooltip près du clic&#10;    const rect = wordElement.getBoundingClientRect();&#10;    hint.style.left = event.clientX + 'px';&#10;    hint.style.top = (rect.top - 50) + 'px';&#10;&#10;    // Ajouter au DOM&#10;    document.body.appendChild(hint);&#10;&#10;    // Afficher avec animation&#10;    setTimeout(() =&gt; {&#10;        hint.classList.add('show');&#10;    }, 10);&#10;&#10;    // Supprimer après 2 secondes avec animation de sortie&#10;    setTimeout(() =&gt; {&#10;        hint.classList.remove('show');&#10;        setTimeout(() =&gt; {&#10;            if (hint.parentNode) {&#10;                hint.parentNode.removeChild(hint);&#10;            }&#10;        }, 300);&#10;    }, 2000);&#10;}&#10;&#10;function getProximityText(proximity) {&#10;    if (proximity &gt;= 900) return ` TRÈS CHAUD ! (${proximity}/1000)`;&#10;    if (proximity &gt;= 700) return `️ Chaud ! (${proximity}/1000)`;&#10;    if (proximity &gt;= 500) return `️ Tiède (${proximity}/1000)`;&#10;    if (proximity &gt;= 300) return `❄️ Froid (${proximity}/1000)`;&#10;    return ` Très froid (${proximity}/1000)`;&#10;}&#10;&#10;function getProximityClass(proximity) {&#10;    if (proximity &gt;= 700) return 'proximity-high';&#10;    if (proximity &gt;= 400) return 'proximity-medium';&#10;    return 'proximity-low';&#10;}&#10;&#10;function revealAllWords() {&#10;    // R��véler tous les mots de l'article&#10;    document.querySelectorAll('.hidden-word').forEach(word =&gt; {&#10;        word.classList.remove('hidden-word');&#10;        word.classList.add('title-word'); // Style spécial pour la victoire&#10;    });&#10;}&#10;&#10;function showConfetti() {&#10;    const container = document.getElementById('confettiContainer') || document.body;&#10;&#10;    // Créer des confettis&#10;    for (let i = 0; i &lt; 50; i++) {&#10;        setTimeout(() =&gt; {&#10;            const confetti = document.createElement('div');&#10;            confetti.className = 'confetti';&#10;            confetti.style.left = Math.random() * 100 + '%';&#10;            confetti.style.background = `hsl(${Math.random() * 360}, 70%, 60%)`;&#10;            confetti.style.animationDuration = (Math.random() * 3 + 2) + 's';&#10;            confetti.style.animationDelay = Math.random() * 2 + 's';&#10;&#10;            container.appendChild(confetti);&#10;&#10;            setTimeout(() =&gt; confetti.remove(), 5000);&#10;        }, i * 100);&#10;    }&#10;}&#10;&#10;async function updateLeaderboard() {&#10;    try {&#10;        const response = await fetch(`/api/leaderboard/${roomCode}`);&#10;        const data = await response.json();&#10;&#10;        displayLeaderboard(data.leaderboard);&#10;        displayActivePlayers(data.active_players);&#10;    } catch (error) {&#10;        console.error('Erreur lors du chargement du classement:', error);&#10;    }&#10;}&#10;&#10;function showGameInterface() {&#10;    document.getElementById('connectionForm').style.display = 'none';&#10;    document.getElementById('playerStats').style.display = 'flex';&#10;    document.getElementById('guessForm').style.display = 'block';&#10;    document.getElementById('articleSection').style.display = 'block';&#10;    document.getElementById('historyPanel').style.display = 'block';&#10;}&#10;&#10;function updatePlayerStats(player) {&#10;    document.getElementById('playerScore').textContent = player.score;&#10;    document.getElementById('playerAttempts').textContent = player.attempts;&#10;    document.getElementById('foundWordsCount').textContent = player.found_words.length;&#10;    document.getElementById('playerName').textContent = gameSession.playerName;&#10;    document.getElementById('totalAttempts').textContent = attemptCounter;&#10;}&#10;&#10;function updateGuessHistory() {&#10;    const container = document.getElementById('guessHistory');&#10;&#10;    if (guessHistory.length === 0) {&#10;        container.innerHTML = '&lt;p class=&quot;text-muted text-center&quot;&gt;Aucune tentative pour le moment&lt;/p&gt;';&#10;        return;&#10;    }&#10;&#10;    container.innerHTML = guessHistory.slice(0, 20).map(guess =&gt; {&#10;        let itemClass = 'guess-item';&#10;&#10;        if (guess.found) {&#10;            itemClass += ' found';&#10;        }&#10;&#10;        return `&#10;            &lt;div class=&quot;${itemClass}&quot;&gt;&#10;                &lt;div class=&quot;guess-number&quot;&gt;${guess.number}&lt;/div&gt;&#10;                &lt;div class=&quot;guess-word&quot;&gt;${guess.word}&lt;/div&gt;&#10;                ${guess.found ? '&lt;i class=&quot;fas fa-check text-success&quot;&gt;&lt;/i&gt;' : ''}&#10;            &lt;/div&gt;&#10;        `;&#10;    }).join('');&#10;}&#10;&#10;function displayLeaderboard(leaderboard) {&#10;    const container = document.getElementById('leaderboard');&#10;    if (leaderboard.length === 0) {&#10;        container.innerHTML = '&lt;p class=&quot;text-muted text-center&quot;&gt;Aucun joueur n\'a encore terminé&lt;/p&gt;';&#10;        return;&#10;    }&#10;    container.innerHTML = leaderboard.map((player, index) =&gt; `&lt;div class=&quot;leaderboard-item p-3&quot;&gt;&lt;div class=&quot;d-flex justify-content-between align-items-center&quot;&gt;&lt;div&gt;&lt;span class=&quot;fw-bold&quot;&gt;${index + 1}. ${player.player_name}&lt;/span&gt;&lt;br&gt;&lt;small class=&quot;text-muted&quot;&gt;${player.attempts} tentatives&lt;/small&gt;&lt;/div&gt;&lt;div class=&quot;text-end&quot;&gt;&lt;span class=&quot;fw-bold text-primary&quot;&gt;${player.score}&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;`).join('');&#10;}&#10;&#10;function displayActivePlayers(players) {&#10;    const container = document.getElementById('activePlayers');&#10;    if (players.length === 0) {&#10;        container.innerHTML = '&lt;p class=&quot;text-muted text-center&quot;&gt;Aucun joueur actif&lt;/p&gt;';&#10;        return;&#10;    }&#10;    container.innerHTML = players.map(player =&gt; `&lt;div class=&quot;d-flex justify-content-between align-items-center p-2 mb-2 bg-light rounded&quot;&gt;&lt;div&gt;&lt;span class=&quot;fw-bold&quot;&gt;${player.player_name}&lt;/span&gt;&lt;br&gt;&lt;small class=&quot;text-muted&quot;&gt;${player.found_words_count} mots&lt;/small&gt;&lt;/div&gt;&lt;span class=&quot;badge bg-primary&quot;&gt;${player.score}&lt;/span&gt;&lt;/div&gt;`).join('');&#10;}&#10;&#10;function showResult(message, type) {&#10;    const container = document.getElementById('resultMessage');&#10;    container.innerHTML = `&lt;div class=&quot;alert alert-${type} alert-dismissible fade show&quot;&gt;${message}&lt;button type=&quot;button&quot; class=&quot;btn-close&quot; data-bs-dismiss=&quot;alert&quot;&gt;&lt;/button&gt;&lt;/div&gt;`;&#10;    setTimeout(() =&gt; {&#10;        const alert = container.querySelector('.alert');&#10;        if (alert) {&#10;            const bsAlert = new bootstrap.Alert(alert);&#10;            bsAlert.close();&#10;        }&#10;    }, 5000);&#10;}&#10;&#10;function showGameCompletedModal(player) {&#10;    document.getElementById('finalScore').textContent = player.score;&#10;    document.getElementById('finalAttempts').textContent = player.attempts;&#10;    const modal = new bootstrap.Modal(document.getElementById('gameCompletedModal'));&#10;    modal.show();&#10;}&#10;&#10;function copyRoomCode() {&#10;    navigator.clipboard.writeText(roomCode).then(() =&gt; {&#10;        showResult('Code de salle copié !', 'success');&#10;    }).catch(() =&gt; {&#10;        const textArea = document.createElement('textarea');&#10;        textArea.value = roomCode;&#10;        document.body.appendChild(textArea);&#10;        textArea.select();&#10;        document.execCommand('copy');&#10;        document.body.removeChild(textArea);&#10;        showResult('Code de salle copié !', 'success');&#10;    });&#10;}&#10;&#10;// Fonction pour mettre à jour l'affichage de la progression du titre&#10;function updateTitleProgress(titleProgress) {&#10;    if (!titleProgress) return;&#10;&#10;    const progressSection = document.getElementById('titleProgressSection');&#10;    const progressDisplay = document.getElementById('titleProgress');&#10;    const progressInfo = document.getElementById('titleProgressInfo');&#10;&#10;    if (progressSection &amp;&amp; progressDisplay &amp;&amp; progressInfo) {&#10;        // Afficher la section de progression du titre&#10;        progressSection.style.display = 'block';&#10;&#10;        // Mettre à jour l'affichage du titre avec les mots trouvés/manquants&#10;        progressDisplay.textContent = titleProgress.display_title;&#10;&#10;        // Mettre à jour les informations de progression&#10;        progressInfo.textContent = `${titleProgress.found_words}/${titleProgress.total_words} mots trouvés (${titleProgress.progress_percentage}%)`;&#10;&#10;        // Ajouter une animation si le titre est complet&#10;        if (titleProgress.is_complete) {&#10;            progressDisplay.style.color = '#28a745';&#10;            progressDisplay.style.fontWeight = 'bold';&#10;            progressDisplay.style.textShadow = '0 0 10px rgba(40, 167, 69, 0.5)';&#10;        }&#10;    }&#10;}&#10;&#10;async function loadGameData() {&#10;    await loadArticleContent();&#10;    await updateLeaderboard();&#10;}&#10;&lt;/script&gt;&#10;{% endblock %}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>