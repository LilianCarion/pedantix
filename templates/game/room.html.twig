{% extends 'base.html.twig' %}

{% block title %}Pedantix - Salle {{ room_code }}{% endblock %}

{% block stylesheets %}
<style>
    .article-content {
        background: rgba(255, 255, 255, 0.95);
        padding: 30px;
        border-radius: 15px;
        line-height: 1.8;
        font-size: 16px;
        text-align: justify;
        max-height: 600px;
        overflow-y: auto;
        border: 2px solid #e0e0e0;
    }

    .hidden-word {
        background: #d0d0d0;
        color: #d0d0d0;
        border-radius: 3px;
        padding: 1px 2px;
        cursor: pointer;
        user-select: none;
        transition: all 0.3s ease;
    }

    .hidden-word-with-proximity {
        background: #d0d0d0;
        border-radius: 3px;
        padding: 1px 2px;
        cursor: pointer;
        user-select: none;
        transition: all 0.3s ease;
        /* La couleur est définie par le style inline depuis PHP */
    }

    .revealed-word {
        color: #333;
        background: transparent;
        border-radius: 3px;
        padding: 1px 2px;
        font-weight: 500;
        animation: revealWord 0.5s ease;
    }

    @keyframes revealWord {
        from {
            background: #d0d0d0;
            color: #d0d0d0;
            transform: scale(1);
        }
        to {
            background: transparent;
            color: #333;
            transform: scale(1.05);
        }
    }

    .proximity-indicator {
        background: linear-gradient(45deg, #FF5722, #D32F2F);
        color: white;
        padding: 8px 15px;
        border-radius: 20px;
        display: inline-block;
        margin: 5px;
        font-weight: 500;
        box-shadow: 0 2px 10px rgba(255, 87, 34, 0.3);
        animation: fadeInScale 0.5s ease;
    }

    .proximity-hot { background: linear-gradient(45deg, #FFEB3B, #FFC107) !important; color: #333 !important; }
    .proximity-warm { background: linear-gradient(45deg, #FF9800, #F57C00) !important; }
    .proximity-cold { background: linear-gradient(45deg, #9E9E9E, #757575) !important; }

    .confetti {
        position: fixed;
        top: -10px;
        left: 50%;
        transform: translateX(-50%);
        width: 10px;
        height: 10px;
        background: #f0f;
        animation: confetti-fall linear infinite;
        z-index: 1000;
    }

    @keyframes confetti-fall {
        to {
            transform: translateX(-50%) translateY(100vh) rotate(720deg);
        }
    }

    .guess-history {
        max-height: 400px;
        overflow-y: auto;
        border: 1px solid #e0e0e0;
        border-radius: 8px;
        padding: 10px;
        background: rgba(255, 255, 255, 0.95);
    }

    .guess-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 8px 12px;
        margin-bottom: 8px;
        background: #f8f9fa;
        border-radius: 6px;
        border-left: 4px solid #6c757d;
        transition: all 0.3s ease;
    }

    .guess-item.found {
        border-left-color: #28a745;
        background: #d4edda;
    }

    .guess-item.proximity-high {
        border-left-color: #ffc107;
        background: #fff3cd;
    }

    .guess-item.proximity-medium {
        border-left-color: #fd7e14;
        background: #ffeaa7;
    }

    .guess-item.proximity-low {
        border-left-color: #6c757d;
        background: #f8f9fa;
    }

    .guess-number {
        background: #6c757d;
        color: white;
        border-radius: 50%;
        width: 24px;
        height: 24px;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 12px;
        font-weight: bold;
        margin-right: 10px;
        flex-shrink: 0;
    }

    .guess-item.found .guess-number {
        background: #28a745;
    }

    .guess-item.proximity-high .guess-number {
        background: #ffc107;
        color: #333;
    }

    .guess-item.proximity-medium .guess-number {
        background: #fd7e14;
    }

    .title-word {
        background: linear-gradient(45deg, #FFD700, #FFA500) !important;
        color: #333 !important;
        font-weight: bold !important;
        font-size: 1.1em !important;
        padding: 2px 4px !important;
        box-shadow: 0 0 10px rgba(255, 215, 0, 0.5) !important;
    }

    .attempts-panel {
        position: sticky;
        top: 20px;
    }
</style>
{% endblock %}

{% block body %}
<div class="row">
    <!-- Volet des tentatives à gauche -->
    <div class="col-lg-3">
        <div class="attempts-panel">
            <div class="game-container p-3">
                <h5 class="mb-3">
                    <i class="fas fa-list-ol text-info me-2"></i>Vos tentatives
                    <span id="totalAttempts" class="badge bg-info ms-2">0</span>
                </h5>
                <div id="guessHistory" class="guess-history">
                    <p class="text-muted text-center">Aucune tentative pour le moment</p>
                </div>
            </div>
        </div>
    </div>

    <!-- Zone de jeu principale -->
    <div class="col-lg-6">
        <div class="game-container p-4">
            <!-- En-tête de la salle -->
            <div class="d-flex justify-content-between align-items-center mb-4">
                <div>
                    <h2 id="roomTitle">Chargement...</h2>
                    <p class="text-muted mb-0">Code de salle: <strong>{{ room_code }}</strong></p>
                </div>
                <button class="btn btn-outline-primary" onclick="copyRoomCode()">
                    <i class="fas fa-copy me-2"></i>Partager
                </button>
            </div>

            <!-- Statistiques du joueur -->
            <div class="row mb-4" id="playerStats" style="display: none;">
                <div class="col-md-3 col-6">
                    <div class="text-center p-3 bg-light rounded">
                        <h4 id="playerScore" class="text-primary mb-0">0</h4>
                        <small class="text-muted">Score</small>
                    </div>
                </div>
                <div class="col-md-3 col-6">
                    <div class="text-center p-3 bg-light rounded">
                        <h4 id="playerAttempts" class="text-info mb-0">0</h4>
                        <small class="text-muted">Tentatives</small>
                    </div>
                </div>
                <div class="col-md-3 col-6">
                    <div class="text-center p-3 bg-light rounded">
                        <h4 id="foundWordsCount" class="text-success mb-0">0</h4>
                        <small class="text-muted">Mots trouvés</small>
                    </div>
                </div>
                <div class="col-md-3 col-6">
                    <div class="text-center p-3 bg-light rounded">
                        <h4 id="playerName" class="text-warning mb-0">-</h4>
                        <small class="text-muted">Joueur</small>
                    </div>
                </div>
            </div>

            <!-- Formulaire de saisie -->
            <form id="guessForm" style="display: none;">
                <div class="input-group input-group-lg mb-4">
                    <input type="text" class="form-control word-input" id="wordGuess"
                           placeholder="Entrez votre mot..." autocomplete="off">
                    <button class="btn btn-primary" type="submit">
                        <i class="fas fa-search me-2"></i>Deviner
                    </button>
                </div>
            </form>

            <!-- Zone de connexion -->
            <div id="connectionForm">
                <div class="text-center mb-4">
                    <h4>Rejoindre la salle {{ room_code }}</h4>
                </div>
                <form id="joinRoomForm">
                    <div class="input-group input-group-lg mb-3">
                        <input type="text" class="form-control word-input" id="playerNameInput"
                               placeholder="Votre nom..." maxlength="20" required>
                        <button class="btn btn-primary" type="submit">
                            <i class="fas fa-sign-in-alt me-2"></i>Rejoindre
                        </button>
                    </div>
                </form>
            </div>

            <!-- Messages de résultat -->
            <div id="resultMessage" class="mb-4"></div>

            <!-- Article Wikipedia avec mots grisés -->
            <div id="articleSection" style="display: none;">
                <h5 class="mb-3">Article Wikipedia :</h5>
                <div id="articleContent" class="article-content">
                    Chargement de l'article...
                </div>
            </div>
        </div>
    </div>

    <!-- Sidebar avec classement et joueurs actifs -->
    <div class="col-lg-3">
        <!-- Classement -->
        <div class="game-container p-4 mb-4">
            <h5 class="mb-3">
                <i class="fas fa-trophy text-warning me-2"></i>Classement
            </h5>
            <div id="leaderboard">
                <p class="text-muted text-center">Chargement...</p>
            </div>
        </div>

        <!-- Joueurs actifs -->
        <div class="game-container p-4">
            <h5 class="mb-3">
                <i class="fas fa-users text-success me-2"></i>Joueurs actifs
            </h5>
            <div id="activePlayers">
                <p class="text-muted text-center">Chargement...</p>
            </div>
        </div>
    </div>
</div>

<!-- Modal de fin de jeu -->
<div class="modal fade" id="gameCompletedModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header bg-success text-white">
                <h5 class="modal-title">
                    <i class="fas fa-trophy me-2"></i>Félicitations !
                </h5>
            </div>
            <div class="modal-body text-center">
                <h3>🎉 Vous avez trouvé le mot-titre ! 🎉</h3>
                <p class="lead">Score final: <span id="finalScore" class="fw-bold text-success"></span></p>
                <p>Tentatives: <span id="finalAttempts" class="fw-bold"></span></p>
                <div id="confettiContainer"></div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" onclick="location.reload()">
                    Rejouer
                </button>
                <button type="button" class="btn btn-secondary" onclick="location.href='/'">
                    Accueil
                </button>
            </div>
        </div>
    </div>
</div>
{% endblock %}

{% block javascripts %}
<script>
let gameSession = null;
let roomCode = '{{ room_code }}';
let guessHistory = [];
let uniqueWords = new Set(); // Pour éviter les doublons
let attemptCounter = 0; // Compteur unique des tentatives

document.addEventListener('DOMContentLoaded', function() {
    // Vérifier si on a déjà une session stockée
    const storedSession = sessionStorage.getItem('gameSession');
    if (storedSession) {
        const sessionData = JSON.parse(storedSession);
        if (sessionData.roomCode === roomCode) {
            gameSession = sessionData;
            showGameInterface();
            loadGameData();
        }
    }

    // Gérer la connexion à la salle
    document.getElementById('joinRoomForm').addEventListener('submit', async function(e) {
        e.preventDefault();
        const playerName = document.getElementById('playerNameInput').value;
        await joinRoom(playerName);
    });

    // Gérer les devinettes
    document.getElementById('guessForm').addEventListener('submit', async function(e) {
        e.preventDefault();
        const guess = document.getElementById('wordGuess').value.trim().toLowerCase();
        if (guess) {
            // Vérifier si le mot a déjà été essayé
            if (uniqueWords.has(guess)) {
                showResult(`Le mot "${guess}" a déjà été essayé !`, 'warning');
                document.getElementById('wordGuess').value = '';
                return;
            }

            await submitGuess(guess);
            document.getElementById('wordGuess').value = '';
        }
    });

    // Actualiser le classement périodiquement
    setInterval(updateLeaderboard, 10000); // Toutes les 10 secondes

    // Actualiser l'article périodiquement pour voir les mots trouvés par d'autres joueurs
    setInterval(loadArticleContent, 5000); // Toutes les 5 secondes
});

async function joinRoom(playerName) {
    try {
        const response = await fetch('/join-room', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                room_code: roomCode,
                player_name: playerName
            })
        });

        const data = await response.json();
        if (data.success) {
            gameSession = {
                sessionId: data.session_id,
                roomCode: data.room.code,
                playerName: data.player.name
            };

            sessionStorage.setItem('gameSession', JSON.stringify(gameSession));

            // Afficher les données du jeu
            document.getElementById('roomTitle').textContent = data.room.title;
            updatePlayerStats(data.player);

            // Récupérer les tentatives existantes du joueur
            if (data.player.found_words && data.player.found_words.length > 0) {
                data.player.found_words.forEach(word => {
                    const normalizedWord = word.toLowerCase();
                    if (!uniqueWords.has(normalizedWord)) {
                        uniqueWords.add(normalizedWord);
                        attemptCounter++;
                        guessHistory.unshift({
                            number: attemptCounter,
                            word: word,
                            found: true,
                            proximity: null,
                            timestamp: 'Précédent'
                        });
                    }
                });
                updateGuessHistory();
            }

            showGameInterface();
            loadArticleContent();
            updateLeaderboard();
        } else {
            showResult(data.error, 'danger');
        }
    } catch (error) {
        showResult('Erreur de connexion', 'danger');
    }
}

async function submitGuess(guess) {
    if (!gameSession) return;

    try {
        const response = await fetch('/api/guess', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                session_id: gameSession.sessionId,
                guess: guess
            })
        });

        const data = await response.json();
        if (data.success) {
            const result = data.result;
            const normalizedGuess = guess.toLowerCase();

            // Si c'est un doublon détecté par le serveur, ne pas traiter
            if (result.duplicate) {
                showResult(`Le mot "${result.word}" a déjà été essayé !`, 'warning');
                return;
            }

            // Ajouter le mot à l'ensemble des mots uniques et à l'historique seulement si nouveau
            if (!uniqueWords.has(normalizedGuess)) {
                uniqueWords.add(normalizedGuess);
                attemptCounter++;

                guessHistory.unshift({
                    number: attemptCounter,
                    word: result.word,
                    found: result.found,
                    proximity: result.proximity,
                    timestamp: new Date().toLocaleTimeString()
                });

                if (result.found) {
                    if (result.gameCompleted) {
                        // Victoire ! Révéler tout l'article
                        showResult(`🎉 VICTOIRE ! Vous avez trouvé "${result.word}" !`, 'success');
                        revealAllWords();
                        showConfetti();
                        setTimeout(() => showGameCompletedModal(data.player), 1000);
                    } else {
                        showResult(`✅ "${result.word}" trouvé dans l'article !`, 'success');
                        loadArticleContent(); // Recharger pour voir le mot révélé
                    }
                } else {
                    // Ne plus afficher de message de proximité - juste recharger l'article
                    loadArticleContent(); // Recharger pour voir les suggestions colorées
                }

                updatePlayerStats(data.player);
                updateGuessHistory();
                updateLeaderboard();
            }
        } else {
            // Gérer les erreurs du serveur
            if (data.error && data.error.includes('déjà')) {
                showResult(`Le mot "${guess}" a déjà été essayé !`, 'warning');
            } else {
                showResult(data.error || 'Erreur lors de la soumission', 'danger');
            }
        }
    } catch (error) {
        console.error('Erreur réseau:', error);
        showResult('Erreur de connexion. Veuillez réessayer.', 'danger');
    }
}

async function loadArticleContent() {
    if (!gameSession) {
        console.log('Pas de session de jeu - impossible de charger l\'article');
        return;
    }

    console.log('Chargement de l\'article pour la session:', gameSession.sessionId);

    try {
        // Préparer les données de proximité des dernières tentatives
        const proximityData = guessHistory
            .filter(guess => !guess.found && guess.proximity > 0)
            .slice(0, 5) // Garder seulement les 5 dernières tentatives avec proximité
            .map(guess => ({
                word: guess.word,
                proximity: guess.proximity
            }));

        console.log('Données de proximité:', proximityData);

        const params = new URLSearchParams({
            session_id: gameSession.sessionId,
            proximity_data: JSON.stringify(proximityData)
        });

        console.log('URL appelée:', `/api/article-content/${roomCode}?${params}`);

        const response = await fetch(`/api/article-content/${roomCode}?${params}`);
        console.log('Réponse reçue:', response.status, response.statusText);

        if (!response.ok) {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }

        const data = await response.json();
        console.log('Données reçues:', data);

        if (data.content) {
            document.getElementById('articleContent').innerHTML = data.content;
            console.log('Article mis à jour avec succès');
        } else {
            console.error('Pas de contenu dans la réponse:', data);
            document.getElementById('articleContent').innerHTML = '<p class="text-danger">Erreur: Aucun contenu reçu</p>';
        }

        if (data.error) {
            console.error('Erreur du serveur:', data.error);
            document.getElementById('articleContent').innerHTML = `<p class="text-danger">Erreur: ${data.error}</p>`;
        }
    } catch (error) {
        console.error('Erreur lors du chargement de l\'article:', error);
        document.getElementById('articleContent').innerHTML = `<p class="text-danger">Erreur de connexion: ${error.message}</p>`;
    }
}

function getProximityText(proximity) {
    if (proximity >= 900) return `🔥 TRÈS CHAUD ! (${proximity}/1000)`;
    if (proximity >= 700) return `🌡️ Chaud ! (${proximity}/1000)`;
    if (proximity >= 500) return `🌤️ Tiède (${proximity}/1000)`;
    if (proximity >= 300) return `❄️ Froid (${proximity}/1000)`;
    return `🧊 Très froid (${proximity}/1000)`;
}

function getProximityClass(proximity) {
    if (proximity >= 700) return 'proximity-high';
    if (proximity >= 400) return 'proximity-medium';
    return 'proximity-low';
}

function revealAllWords() {
    // Révéler tous les mots de l'article
    document.querySelectorAll('.hidden-word').forEach(word => {
        word.classList.remove('hidden-word');
        word.classList.add('title-word'); // Style spécial pour la victoire
    });
}

function showConfetti() {
    const container = document.getElementById('confettiContainer') || document.body;

    // Créer des confettis
    for (let i = 0; i < 50; i++) {
        setTimeout(() => {
            const confetti = document.createElement('div');
            confetti.className = 'confetti';
            confetti.style.left = Math.random() * 100 + '%';
            confetti.style.background = `hsl(${Math.random() * 360}, 70%, 60%)`;
            confetti.style.animationDuration = (Math.random() * 3 + 2) + 's';
            confetti.style.animationDelay = Math.random() * 2 + 's';

            container.appendChild(confetti);

            setTimeout(() => confetti.remove(), 5000);
        }, i * 100);
    }
}

async function updateLeaderboard() {
    try {
        const response = await fetch(`/api/leaderboard/${roomCode}`);
        const data = await response.json();

        displayLeaderboard(data.leaderboard);
        displayActivePlayers(data.active_players);
    } catch (error) {
        console.error('Erreur lors du chargement du classement:', error);
    }
}

function showGameInterface() {
    document.getElementById('connectionForm').style.display = 'none';
    document.getElementById('playerStats').style.display = 'flex';
    document.getElementById('guessForm').style.display = 'block';
    document.getElementById('articleSection').style.display = 'block';
}

function updatePlayerStats(player) {
    document.getElementById('playerScore').textContent = player.score;
    document.getElementById('playerAttempts').textContent = player.attempts;
    document.getElementById('foundWordsCount').textContent = player.found_words.length;
    document.getElementById('playerName').textContent = gameSession.playerName;
    document.getElementById('totalAttempts').textContent = attemptCounter;
}

function updateGuessHistory() {
    const container = document.getElementById('guessHistory');

    if (guessHistory.length === 0) {
        container.innerHTML = '<p class="text-muted text-center">Aucune tentative pour le moment</p>';
        return;
    }

    container.innerHTML = guessHistory.slice(0, 20).map(guess => {
        let itemClass = 'guess-item';
        let statusText = '';

        if (guess.found) {
            itemClass += ' found';
            statusText = 'Trouvé !';
        } else if (guess.proximity > 0) {
            itemClass += ' ' + getProximityClass(guess.proximity);
            statusText = getProximityText(guess.proximity);
        } else {
            statusText = 'Pas trouvé';
        }

        return `
            <div class="${itemClass}">
                <div class="d-flex align-items-center">
                    <div class="guess-number">${guess.number}</div>
                    <div class="flex-grow-1">
                        <div class="fw-bold">${guess.word}</div>
                        <small class="text-muted">${guess.timestamp}</small>
                    </div>
                </div>
                <div class="text-end">
                    <small class="badge ${guess.found ? 'bg-success' : 'bg-secondary'}">${statusText}</small>
                </div>
            </div>
        `;
    }).join('');
}

function displayLeaderboard(leaderboard) {
    const container = document.getElementById('leaderboard');
    if (leaderboard.length === 0) {
        container.innerHTML = '<p class="text-muted text-center">Aucun joueur n\'a encore terminé</p>';
        return;
    }
    container.innerHTML = leaderboard.map((player, index) => `<div class="leaderboard-item p-3"><div class="d-flex justify-content-between align-items-center"><div><span class="fw-bold">${index + 1}. ${player.player_name}</span><br><small class="text-muted">${player.attempts} tentatives</small></div><div class="text-end"><span class="fw-bold text-primary">${player.score}</span></div></div></div>`).join('');
}

function displayActivePlayers(players) {
    const container = document.getElementById('activePlayers');
    if (players.length === 0) {
        container.innerHTML = '<p class="text-muted text-center">Aucun joueur actif</p>';
        return;
    }
    container.innerHTML = players.map(player => `<div class="d-flex justify-content-between align-items-center p-2 mb-2 bg-light rounded"><div><span class="fw-bold">${player.player_name}</span><br><small class="text-muted">${player.found_words_count} mots</small></div><span class="badge bg-primary">${player.score}</span></div>`).join('');
}

function showResult(message, type) {
    const container = document.getElementById('resultMessage');
    container.innerHTML = `<div class="alert alert-${type} alert-dismissible fade show">${message}<button type="button" class="btn-close" data-bs-dismiss="alert"></button></div>`;
    setTimeout(() => {
        const alert = container.querySelector('.alert');
        if (alert) {
            const bsAlert = new bootstrap.Alert(alert);
            bsAlert.close();
        }
    }, 5000);
}

function showGameCompletedModal(player) {
    document.getElementById('finalScore').textContent = player.score;
    document.getElementById('finalAttempts').textContent = player.attempts;
    const modal = new bootstrap.Modal(document.getElementById('gameCompletedModal'));
    modal.show();
}

function copyRoomCode() {
    navigator.clipboard.writeText(roomCode).then(() => {
        showResult('Code de salle copié !', 'success');
    }).catch(() => {
        const textArea = document.createElement('textarea');
        textArea.value = roomCode;
        document.body.appendChild(textArea);
        textArea.select();
        document.execCommand('copy');
        document.body.removeChild(textArea);
        showResult('Code de salle copié !', 'success');
    });
}

async function loadGameData() {
    await loadArticleContent();
    await updateLeaderboard();
}
</script>
{% endblock %}
